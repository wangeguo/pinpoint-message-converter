# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from pinpoint.protobuf import Cmd_pb2 as v1_dot_Cmd__pb2
from pinpoint.protobuf import Span_pb2 as v1_dot_Span__pb2
from pinpoint.protobuf import Stat_pb2 as v1_dot_Stat__pb2


class SpanStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendSpan = channel.stream_unary(
                '/v1.Span/SendSpan',
                request_serializer=v1_dot_Span__pb2.PSpanMessage.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class SpanServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendSpan(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpanServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendSpan': grpc.stream_unary_rpc_method_handler(
                    servicer.SendSpan,
                    request_deserializer=v1_dot_Span__pb2.PSpanMessage.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'v1.Span', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Span(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendSpan(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/v1.Span/SendSpan',
            v1_dot_Span__pb2.PSpanMessage.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AgentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestAgentInfo = channel.unary_unary(
                '/v1.Agent/RequestAgentInfo',
                request_serializer=v1_dot_Stat__pb2.PAgentInfo.SerializeToString,
                response_deserializer=v1_dot_Span__pb2.PResult.FromString,
                )
        self.PingSession = channel.stream_stream(
                '/v1.Agent/PingSession',
                request_serializer=v1_dot_Stat__pb2.PPing.SerializeToString,
                response_deserializer=v1_dot_Stat__pb2.PPing.FromString,
                )


class AgentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestAgentInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PingSession(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestAgentInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestAgentInfo,
                    request_deserializer=v1_dot_Stat__pb2.PAgentInfo.FromString,
                    response_serializer=v1_dot_Span__pb2.PResult.SerializeToString,
            ),
            'PingSession': grpc.stream_stream_rpc_method_handler(
                    servicer.PingSession,
                    request_deserializer=v1_dot_Stat__pb2.PPing.FromString,
                    response_serializer=v1_dot_Stat__pb2.PPing.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'v1.Agent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Agent(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestAgentInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1.Agent/RequestAgentInfo',
            v1_dot_Stat__pb2.PAgentInfo.SerializeToString,
            v1_dot_Span__pb2.PResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PingSession(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/v1.Agent/PingSession',
            v1_dot_Stat__pb2.PPing.SerializeToString,
            v1_dot_Stat__pb2.PPing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MetadataStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestSqlMetaData = channel.unary_unary(
                '/v1.Metadata/RequestSqlMetaData',
                request_serializer=v1_dot_Span__pb2.PSqlMetaData.SerializeToString,
                response_deserializer=v1_dot_Span__pb2.PResult.FromString,
                )
        self.RequestApiMetaData = channel.unary_unary(
                '/v1.Metadata/RequestApiMetaData',
                request_serializer=v1_dot_Span__pb2.PApiMetaData.SerializeToString,
                response_deserializer=v1_dot_Span__pb2.PResult.FromString,
                )
        self.RequestStringMetaData = channel.unary_unary(
                '/v1.Metadata/RequestStringMetaData',
                request_serializer=v1_dot_Span__pb2.PStringMetaData.SerializeToString,
                response_deserializer=v1_dot_Span__pb2.PResult.FromString,
                )


class MetadataServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestSqlMetaData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestApiMetaData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestStringMetaData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetadataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestSqlMetaData': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestSqlMetaData,
                    request_deserializer=v1_dot_Span__pb2.PSqlMetaData.FromString,
                    response_serializer=v1_dot_Span__pb2.PResult.SerializeToString,
            ),
            'RequestApiMetaData': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestApiMetaData,
                    request_deserializer=v1_dot_Span__pb2.PApiMetaData.FromString,
                    response_serializer=v1_dot_Span__pb2.PResult.SerializeToString,
            ),
            'RequestStringMetaData': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestStringMetaData,
                    request_deserializer=v1_dot_Span__pb2.PStringMetaData.FromString,
                    response_serializer=v1_dot_Span__pb2.PResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'v1.Metadata', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Metadata(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestSqlMetaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1.Metadata/RequestSqlMetaData',
            v1_dot_Span__pb2.PSqlMetaData.SerializeToString,
            v1_dot_Span__pb2.PResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestApiMetaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1.Metadata/RequestApiMetaData',
            v1_dot_Span__pb2.PApiMetaData.SerializeToString,
            v1_dot_Span__pb2.PResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestStringMetaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1.Metadata/RequestStringMetaData',
            v1_dot_Span__pb2.PStringMetaData.SerializeToString,
            v1_dot_Span__pb2.PResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StatStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendAgentStat = channel.stream_unary(
                '/v1.Stat/SendAgentStat',
                request_serializer=v1_dot_Stat__pb2.PStatMessage.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class StatServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendAgentStat(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendAgentStat': grpc.stream_unary_rpc_method_handler(
                    servicer.SendAgentStat,
                    request_deserializer=v1_dot_Stat__pb2.PStatMessage.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'v1.Stat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Stat(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendAgentStat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/v1.Stat/SendAgentStat',
            v1_dot_Stat__pb2.PStatMessage.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ProfilerCommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HandleCommand = channel.stream_stream(
                '/v1.ProfilerCommandService/HandleCommand',
                request_serializer=v1_dot_Cmd__pb2.PCmdMessage.SerializeToString,
                response_deserializer=v1_dot_Cmd__pb2.PCmdRequest.FromString,
                )
        self.HandleCommandV2 = channel.stream_stream(
                '/v1.ProfilerCommandService/HandleCommandV2',
                request_serializer=v1_dot_Cmd__pb2.PCmdMessage.SerializeToString,
                response_deserializer=v1_dot_Cmd__pb2.PCmdRequest.FromString,
                )
        self.CommandEcho = channel.unary_unary(
                '/v1.ProfilerCommandService/CommandEcho',
                request_serializer=v1_dot_Cmd__pb2.PCmdEchoResponse.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.CommandStreamActiveThreadCount = channel.stream_unary(
                '/v1.ProfilerCommandService/CommandStreamActiveThreadCount',
                request_serializer=v1_dot_Cmd__pb2.PCmdActiveThreadCountRes.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.CommandActiveThreadDump = channel.unary_unary(
                '/v1.ProfilerCommandService/CommandActiveThreadDump',
                request_serializer=v1_dot_Cmd__pb2.PCmdActiveThreadDumpRes.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.CommandActiveThreadLightDump = channel.unary_unary(
                '/v1.ProfilerCommandService/CommandActiveThreadLightDump',
                request_serializer=v1_dot_Cmd__pb2.PCmdActiveThreadLightDumpRes.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class ProfilerCommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HandleCommand(self, request_iterator, context):
        """deprecated api
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HandleCommandV2(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommandEcho(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommandStreamActiveThreadCount(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommandActiveThreadDump(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommandActiveThreadLightDump(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProfilerCommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HandleCommand': grpc.stream_stream_rpc_method_handler(
                    servicer.HandleCommand,
                    request_deserializer=v1_dot_Cmd__pb2.PCmdMessage.FromString,
                    response_serializer=v1_dot_Cmd__pb2.PCmdRequest.SerializeToString,
            ),
            'HandleCommandV2': grpc.stream_stream_rpc_method_handler(
                    servicer.HandleCommandV2,
                    request_deserializer=v1_dot_Cmd__pb2.PCmdMessage.FromString,
                    response_serializer=v1_dot_Cmd__pb2.PCmdRequest.SerializeToString,
            ),
            'CommandEcho': grpc.unary_unary_rpc_method_handler(
                    servicer.CommandEcho,
                    request_deserializer=v1_dot_Cmd__pb2.PCmdEchoResponse.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CommandStreamActiveThreadCount': grpc.stream_unary_rpc_method_handler(
                    servicer.CommandStreamActiveThreadCount,
                    request_deserializer=v1_dot_Cmd__pb2.PCmdActiveThreadCountRes.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CommandActiveThreadDump': grpc.unary_unary_rpc_method_handler(
                    servicer.CommandActiveThreadDump,
                    request_deserializer=v1_dot_Cmd__pb2.PCmdActiveThreadDumpRes.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CommandActiveThreadLightDump': grpc.unary_unary_rpc_method_handler(
                    servicer.CommandActiveThreadLightDump,
                    request_deserializer=v1_dot_Cmd__pb2.PCmdActiveThreadLightDumpRes.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'v1.ProfilerCommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProfilerCommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HandleCommand(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/v1.ProfilerCommandService/HandleCommand',
            v1_dot_Cmd__pb2.PCmdMessage.SerializeToString,
            v1_dot_Cmd__pb2.PCmdRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HandleCommandV2(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/v1.ProfilerCommandService/HandleCommandV2',
            v1_dot_Cmd__pb2.PCmdMessage.SerializeToString,
            v1_dot_Cmd__pb2.PCmdRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommandEcho(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1.ProfilerCommandService/CommandEcho',
            v1_dot_Cmd__pb2.PCmdEchoResponse.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommandStreamActiveThreadCount(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/v1.ProfilerCommandService/CommandStreamActiveThreadCount',
            v1_dot_Cmd__pb2.PCmdActiveThreadCountRes.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommandActiveThreadDump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1.ProfilerCommandService/CommandActiveThreadDump',
            v1_dot_Cmd__pb2.PCmdActiveThreadDumpRes.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommandActiveThreadLightDump(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/v1.ProfilerCommandService/CommandActiveThreadLightDump',
            v1_dot_Cmd__pb2.PCmdActiveThreadLightDumpRes.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
