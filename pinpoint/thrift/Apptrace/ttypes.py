#
# Autogenerated by Thrift Compiler (0.18.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TJvmGcType(object):
    UNKNOWN = 0
    SERIAL = 1
    PARALLEL = 2
    CMS = 3
    G1 = 4
    JRockitThroughput = 5

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "SERIAL",
        2: "PARALLEL",
        3: "CMS",
        4: "G1",
        5: "JRockitThroughput",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "SERIAL": 1,
        "PARALLEL": 2,
        "CMS": 3,
        "G1": 4,
        "JRockitThroughput": 5,
    }


class TServiceInfo(object):
    """
    Attributes:
     - serviceName
     - serviceLibs

    """


    def __init__(self, serviceName=None, serviceLibs=None,):
        self.serviceName = serviceName
        self.serviceLibs = serviceLibs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.serviceLibs = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.serviceLibs.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TServiceInfo')
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 1)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.serviceLibs is not None:
            oprot.writeFieldBegin('serviceLibs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.serviceLibs))
            for iter6 in self.serviceLibs:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TServerMetaData(object):
    """
    Attributes:
     - serverInfo
     - vmArgs
     - serviceInfos

    """


    def __init__(self, serverInfo=None, vmArgs=None, serviceInfos=None,):
        self.serverInfo = serverInfo
        self.vmArgs = vmArgs
        self.serviceInfos = serviceInfos

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serverInfo = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vmArgs = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.vmArgs.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.serviceInfos = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = TServiceInfo()
                        _elem18.read(iprot)
                        self.serviceInfos.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TServerMetaData')
        if self.serverInfo is not None:
            oprot.writeFieldBegin('serverInfo', TType.STRING, 1)
            oprot.writeString(self.serverInfo.encode('utf-8') if sys.version_info[0] == 2 else self.serverInfo)
            oprot.writeFieldEnd()
        if self.vmArgs is not None:
            oprot.writeFieldBegin('vmArgs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.vmArgs))
            for iter19 in self.vmArgs:
                oprot.writeString(iter19.encode('utf-8') if sys.version_info[0] == 2 else iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.serviceInfos is not None:
            oprot.writeFieldBegin('serviceInfos', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.serviceInfos))
            for iter20 in self.serviceInfos:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TJvmInfo(object):
    """
    Attributes:
     - version
     - vmVersion
     - gcType

    """


    def __init__(self, version=0, vmVersion=None, gcType=    0,):
        self.version = version
        self.vmVersion = vmVersion
        self.gcType = gcType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.version = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.vmVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.gcType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TJvmInfo')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I16, 1)
            oprot.writeI16(self.version)
            oprot.writeFieldEnd()
        if self.vmVersion is not None:
            oprot.writeFieldBegin('vmVersion', TType.STRING, 2)
            oprot.writeString(self.vmVersion.encode('utf-8') if sys.version_info[0] == 2 else self.vmVersion)
            oprot.writeFieldEnd()
        if self.gcType is not None:
            oprot.writeFieldBegin('gcType', TType.I32, 3)
            oprot.writeI32(self.gcType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.version is None:
            raise TProtocolException(message='Required field version is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAgentInfo(object):
    """
    Attributes:
     - hostname
     - ip
     - ports
     - agentId
     - applicationName
     - serviceType
     - pid
     - agentVersion
     - vmVersion
     - startTimestamp
     - endTimestamp
     - endStatus
     - appkey
     - osName
     - osVersion
     - appId
     - tenant
     - collectionStatus
     - serverMetaData
     - jvmInfo

    """


    def __init__(self, hostname=None, ip=None, ports=None, agentId=None, applicationName=None, serviceType=None, pid=None, agentVersion=None, vmVersion=None, startTimestamp=None, endTimestamp=None, endStatus=None, appkey=None, osName=None, osVersion=None, appId=None, tenant=None, collectionStatus=None, serverMetaData=None, jvmInfo=None,):
        self.hostname = hostname
        self.ip = ip
        self.ports = ports
        self.agentId = agentId
        self.applicationName = applicationName
        self.serviceType = serviceType
        self.pid = pid
        self.agentVersion = agentVersion
        self.vmVersion = vmVersion
        self.startTimestamp = startTimestamp
        self.endTimestamp = endTimestamp
        self.endStatus = endStatus
        self.appkey = appkey
        self.osName = osName
        self.osVersion = osVersion
        self.appId = appId
        self.tenant = tenant
        self.collectionStatus = collectionStatus
        self.serverMetaData = serverMetaData
        self.jvmInfo = jvmInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hostname = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ports = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.applicationName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I16:
                    self.serviceType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.pid = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.agentVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.vmVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.startTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.endTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.endStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.appkey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.osName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.osVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.tenant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.collectionStatus = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.serverMetaData = TServerMetaData()
                    self.serverMetaData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRUCT:
                    self.jvmInfo = TJvmInfo()
                    self.jvmInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAgentInfo')
        if self.hostname is not None:
            oprot.writeFieldBegin('hostname', TType.STRING, 1)
            oprot.writeString(self.hostname.encode('utf-8') if sys.version_info[0] == 2 else self.hostname)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.ports is not None:
            oprot.writeFieldBegin('ports', TType.STRING, 3)
            oprot.writeString(self.ports.encode('utf-8') if sys.version_info[0] == 2 else self.ports)
            oprot.writeFieldEnd()
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 4)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.applicationName is not None:
            oprot.writeFieldBegin('applicationName', TType.STRING, 5)
            oprot.writeString(self.applicationName.encode('utf-8') if sys.version_info[0] == 2 else self.applicationName)
            oprot.writeFieldEnd()
        if self.serviceType is not None:
            oprot.writeFieldBegin('serviceType', TType.I16, 6)
            oprot.writeI16(self.serviceType)
            oprot.writeFieldEnd()
        if self.pid is not None:
            oprot.writeFieldBegin('pid', TType.I32, 7)
            oprot.writeI32(self.pid)
            oprot.writeFieldEnd()
        if self.agentVersion is not None:
            oprot.writeFieldBegin('agentVersion', TType.STRING, 8)
            oprot.writeString(self.agentVersion.encode('utf-8') if sys.version_info[0] == 2 else self.agentVersion)
            oprot.writeFieldEnd()
        if self.vmVersion is not None:
            oprot.writeFieldBegin('vmVersion', TType.STRING, 9)
            oprot.writeString(self.vmVersion.encode('utf-8') if sys.version_info[0] == 2 else self.vmVersion)
            oprot.writeFieldEnd()
        if self.startTimestamp is not None:
            oprot.writeFieldBegin('startTimestamp', TType.I64, 10)
            oprot.writeI64(self.startTimestamp)
            oprot.writeFieldEnd()
        if self.endTimestamp is not None:
            oprot.writeFieldBegin('endTimestamp', TType.I64, 11)
            oprot.writeI64(self.endTimestamp)
            oprot.writeFieldEnd()
        if self.endStatus is not None:
            oprot.writeFieldBegin('endStatus', TType.I32, 12)
            oprot.writeI32(self.endStatus)
            oprot.writeFieldEnd()
        if self.appkey is not None:
            oprot.writeFieldBegin('appkey', TType.STRING, 13)
            oprot.writeString(self.appkey.encode('utf-8') if sys.version_info[0] == 2 else self.appkey)
            oprot.writeFieldEnd()
        if self.osName is not None:
            oprot.writeFieldBegin('osName', TType.STRING, 14)
            oprot.writeString(self.osName.encode('utf-8') if sys.version_info[0] == 2 else self.osName)
            oprot.writeFieldEnd()
        if self.osVersion is not None:
            oprot.writeFieldBegin('osVersion', TType.STRING, 15)
            oprot.writeString(self.osVersion.encode('utf-8') if sys.version_info[0] == 2 else self.osVersion)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 16)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        if self.tenant is not None:
            oprot.writeFieldBegin('tenant', TType.STRING, 17)
            oprot.writeString(self.tenant.encode('utf-8') if sys.version_info[0] == 2 else self.tenant)
            oprot.writeFieldEnd()
        if self.collectionStatus is not None:
            oprot.writeFieldBegin('collectionStatus', TType.STRING, 18)
            oprot.writeString(self.collectionStatus.encode('utf-8') if sys.version_info[0] == 2 else self.collectionStatus)
            oprot.writeFieldEnd()
        if self.serverMetaData is not None:
            oprot.writeFieldBegin('serverMetaData', TType.STRUCT, 20)
            self.serverMetaData.write(oprot)
            oprot.writeFieldEnd()
        if self.jvmInfo is not None:
            oprot.writeFieldBegin('jvmInfo', TType.STRUCT, 30)
            self.jvmInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.hostname is None:
            raise TProtocolException(message='Required field hostname is unset!')
        if self.ip is None:
            raise TProtocolException(message='Required field ip is unset!')
        if self.ports is None:
            raise TProtocolException(message='Required field ports is unset!')
        if self.agentId is None:
            raise TProtocolException(message='Required field agentId is unset!')
        if self.applicationName is None:
            raise TProtocolException(message='Required field applicationName is unset!')
        if self.serviceType is None:
            raise TProtocolException(message='Required field serviceType is unset!')
        if self.pid is None:
            raise TProtocolException(message='Required field pid is unset!')
        if self.agentVersion is None:
            raise TProtocolException(message='Required field agentVersion is unset!')
        if self.vmVersion is None:
            raise TProtocolException(message='Required field vmVersion is unset!')
        if self.startTimestamp is None:
            raise TProtocolException(message='Required field startTimestamp is unset!')
        if self.appkey is None:
            raise TProtocolException(message='Required field appkey is unset!')
        if self.osName is None:
            raise TProtocolException(message='Required field osName is unset!')
        if self.osVersion is None:
            raise TProtocolException(message='Required field osVersion is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.tenant is None:
            raise TProtocolException(message='Required field tenant is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TJvmGc(object):
    """
    Attributes:
     - type
     - jvmMemoryHeapUsed
     - jvmMemoryHeapMax
     - jvmMemoryNonHeapUsed
     - jvmMemoryNonHeapMax
     - jvmGcOldCount
     - jvmGcOldTime
     - jvmGcDetailed
     - jvmMemoryNonHeapCommitted
     - totalPhysicalMemory
     - tExecuteDfs
     - tExecuteIostat
     - jdbcConnNum
     - threadNum
     - jvmGcOldCountNew
     - jvmGcOldTimeNew

    """


    def __init__(self, type=    0, jvmMemoryHeapUsed=None, jvmMemoryHeapMax=None, jvmMemoryNonHeapUsed=None, jvmMemoryNonHeapMax=None, jvmGcOldCount=None, jvmGcOldTime=None, jvmGcDetailed=None, jvmMemoryNonHeapCommitted=None, totalPhysicalMemory=None, tExecuteDfs=None, tExecuteIostat=None, jdbcConnNum=None, threadNum=None, jvmGcOldCountNew=None, jvmGcOldTimeNew=None,):
        self.type = type
        self.jvmMemoryHeapUsed = jvmMemoryHeapUsed
        self.jvmMemoryHeapMax = jvmMemoryHeapMax
        self.jvmMemoryNonHeapUsed = jvmMemoryNonHeapUsed
        self.jvmMemoryNonHeapMax = jvmMemoryNonHeapMax
        self.jvmGcOldCount = jvmGcOldCount
        self.jvmGcOldTime = jvmGcOldTime
        self.jvmGcDetailed = jvmGcDetailed
        self.jvmMemoryNonHeapCommitted = jvmMemoryNonHeapCommitted
        self.totalPhysicalMemory = totalPhysicalMemory
        self.tExecuteDfs = tExecuteDfs
        self.tExecuteIostat = tExecuteIostat
        self.jdbcConnNum = jdbcConnNum
        self.threadNum = threadNum
        self.jvmGcOldCountNew = jvmGcOldCountNew
        self.jvmGcOldTimeNew = jvmGcOldTimeNew

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.jvmMemoryHeapUsed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.jvmMemoryHeapMax = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.jvmMemoryNonHeapUsed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.jvmMemoryNonHeapMax = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.jvmGcOldCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.jvmGcOldTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.jvmGcDetailed = TJvmGcDetailed()
                    self.jvmGcDetailed.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.jvmMemoryNonHeapCommitted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.totalPhysicalMemory = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.tExecuteDfs = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = TExecuteDf()
                        _elem26.read(iprot)
                        self.tExecuteDfs.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.tExecuteIostat = TExecuteIostat()
                    self.tExecuteIostat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I16:
                    self.jdbcConnNum = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.threadNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.jvmGcOldCountNew = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.jvmGcOldTimeNew = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TJvmGc')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.jvmMemoryHeapUsed is not None:
            oprot.writeFieldBegin('jvmMemoryHeapUsed', TType.I64, 2)
            oprot.writeI64(self.jvmMemoryHeapUsed)
            oprot.writeFieldEnd()
        if self.jvmMemoryHeapMax is not None:
            oprot.writeFieldBegin('jvmMemoryHeapMax', TType.I64, 3)
            oprot.writeI64(self.jvmMemoryHeapMax)
            oprot.writeFieldEnd()
        if self.jvmMemoryNonHeapUsed is not None:
            oprot.writeFieldBegin('jvmMemoryNonHeapUsed', TType.I64, 4)
            oprot.writeI64(self.jvmMemoryNonHeapUsed)
            oprot.writeFieldEnd()
        if self.jvmMemoryNonHeapMax is not None:
            oprot.writeFieldBegin('jvmMemoryNonHeapMax', TType.I64, 5)
            oprot.writeI64(self.jvmMemoryNonHeapMax)
            oprot.writeFieldEnd()
        if self.jvmGcOldCount is not None:
            oprot.writeFieldBegin('jvmGcOldCount', TType.I64, 6)
            oprot.writeI64(self.jvmGcOldCount)
            oprot.writeFieldEnd()
        if self.jvmGcOldTime is not None:
            oprot.writeFieldBegin('jvmGcOldTime', TType.I64, 7)
            oprot.writeI64(self.jvmGcOldTime)
            oprot.writeFieldEnd()
        if self.jvmGcDetailed is not None:
            oprot.writeFieldBegin('jvmGcDetailed', TType.STRUCT, 8)
            self.jvmGcDetailed.write(oprot)
            oprot.writeFieldEnd()
        if self.jvmMemoryNonHeapCommitted is not None:
            oprot.writeFieldBegin('jvmMemoryNonHeapCommitted', TType.I64, 9)
            oprot.writeI64(self.jvmMemoryNonHeapCommitted)
            oprot.writeFieldEnd()
        if self.totalPhysicalMemory is not None:
            oprot.writeFieldBegin('totalPhysicalMemory', TType.I64, 10)
            oprot.writeI64(self.totalPhysicalMemory)
            oprot.writeFieldEnd()
        if self.tExecuteDfs is not None:
            oprot.writeFieldBegin('tExecuteDfs', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.tExecuteDfs))
            for iter27 in self.tExecuteDfs:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tExecuteIostat is not None:
            oprot.writeFieldBegin('tExecuteIostat', TType.STRUCT, 12)
            self.tExecuteIostat.write(oprot)
            oprot.writeFieldEnd()
        if self.jdbcConnNum is not None:
            oprot.writeFieldBegin('jdbcConnNum', TType.I16, 13)
            oprot.writeI16(self.jdbcConnNum)
            oprot.writeFieldEnd()
        if self.threadNum is not None:
            oprot.writeFieldBegin('threadNum', TType.I32, 14)
            oprot.writeI32(self.threadNum)
            oprot.writeFieldEnd()
        if self.jvmGcOldCountNew is not None:
            oprot.writeFieldBegin('jvmGcOldCountNew', TType.I64, 15)
            oprot.writeI64(self.jvmGcOldCountNew)
            oprot.writeFieldEnd()
        if self.jvmGcOldTimeNew is not None:
            oprot.writeFieldBegin('jvmGcOldTimeNew', TType.I64, 16)
            oprot.writeI64(self.jvmGcOldTimeNew)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.jvmMemoryHeapUsed is None:
            raise TProtocolException(message='Required field jvmMemoryHeapUsed is unset!')
        if self.jvmMemoryHeapMax is None:
            raise TProtocolException(message='Required field jvmMemoryHeapMax is unset!')
        if self.jvmMemoryNonHeapUsed is None:
            raise TProtocolException(message='Required field jvmMemoryNonHeapUsed is unset!')
        if self.jvmMemoryNonHeapMax is None:
            raise TProtocolException(message='Required field jvmMemoryNonHeapMax is unset!')
        if self.jvmGcOldCount is None:
            raise TProtocolException(message='Required field jvmGcOldCount is unset!')
        if self.jvmGcOldTime is None:
            raise TProtocolException(message='Required field jvmGcOldTime is unset!')
        if self.jvmMemoryNonHeapCommitted is None:
            raise TProtocolException(message='Required field jvmMemoryNonHeapCommitted is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TExecuteDf(object):
    """
    Attributes:
     - fileSystem
     - size
     - used
     - avail
     - usage
     - mountedOn

    """


    def __init__(self, fileSystem=None, size=None, used=None, avail=None, usage=None, mountedOn=None,):
        self.fileSystem = fileSystem
        self.size = size
        self.used = used
        self.avail = avail
        self.usage = usage
        self.mountedOn = mountedOn

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileSystem = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.used = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.avail = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.usage = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.mountedOn = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TExecuteDf')
        if self.fileSystem is not None:
            oprot.writeFieldBegin('fileSystem', TType.STRING, 1)
            oprot.writeString(self.fileSystem.encode('utf-8') if sys.version_info[0] == 2 else self.fileSystem)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 2)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.used is not None:
            oprot.writeFieldBegin('used', TType.I64, 3)
            oprot.writeI64(self.used)
            oprot.writeFieldEnd()
        if self.avail is not None:
            oprot.writeFieldBegin('avail', TType.I64, 4)
            oprot.writeI64(self.avail)
            oprot.writeFieldEnd()
        if self.usage is not None:
            oprot.writeFieldBegin('usage', TType.I16, 5)
            oprot.writeI16(self.usage)
            oprot.writeFieldEnd()
        if self.mountedOn is not None:
            oprot.writeFieldBegin('mountedOn', TType.STRING, 6)
            oprot.writeString(self.mountedOn.encode('utf-8') if sys.version_info[0] == 2 else self.mountedOn)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.fileSystem is None:
            raise TProtocolException(message='Required field fileSystem is unset!')
        if self.size is None:
            raise TProtocolException(message='Required field size is unset!')
        if self.used is None:
            raise TProtocolException(message='Required field used is unset!')
        if self.avail is None:
            raise TProtocolException(message='Required field avail is unset!')
        if self.usage is None:
            raise TProtocolException(message='Required field usage is unset!')
        if self.mountedOn is None:
            raise TProtocolException(message='Required field mountedOn is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TExecuteIostat(object):
    """
    Attributes:
     - tExecuteIostatCpu
     - tExecuteIostatDevices

    """


    def __init__(self, tExecuteIostatCpu=None, tExecuteIostatDevices=None,):
        self.tExecuteIostatCpu = tExecuteIostatCpu
        self.tExecuteIostatDevices = tExecuteIostatDevices

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.tExecuteIostatCpu = TExecuteIostatCpu()
                    self.tExecuteIostatCpu.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.tExecuteIostatDevices = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = TExecuteIostatDevice()
                        _elem33.read(iprot)
                        self.tExecuteIostatDevices.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TExecuteIostat')
        if self.tExecuteIostatCpu is not None:
            oprot.writeFieldBegin('tExecuteIostatCpu', TType.STRUCT, 1)
            self.tExecuteIostatCpu.write(oprot)
            oprot.writeFieldEnd()
        if self.tExecuteIostatDevices is not None:
            oprot.writeFieldBegin('tExecuteIostatDevices', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.tExecuteIostatDevices))
            for iter34 in self.tExecuteIostatDevices:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.tExecuteIostatCpu is None:
            raise TProtocolException(message='Required field tExecuteIostatCpu is unset!')
        if self.tExecuteIostatDevices is None:
            raise TProtocolException(message='Required field tExecuteIostatDevices is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TExecuteIostatCpu(object):
    """
    Attributes:
     - userUsage
     - niceUsage
     - systemUsage
     - iowaitUsage
     - stealUsage
     - idleUsage

    """


    def __init__(self, userUsage=None, niceUsage=None, systemUsage=None, iowaitUsage=None, stealUsage=None, idleUsage=None,):
        self.userUsage = userUsage
        self.niceUsage = niceUsage
        self.systemUsage = systemUsage
        self.iowaitUsage = iowaitUsage
        self.stealUsage = stealUsage
        self.idleUsage = idleUsage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userUsage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.niceUsage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.systemUsage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.iowaitUsage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.stealUsage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.idleUsage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TExecuteIostatCpu')
        if self.userUsage is not None:
            oprot.writeFieldBegin('userUsage', TType.STRING, 1)
            oprot.writeString(self.userUsage.encode('utf-8') if sys.version_info[0] == 2 else self.userUsage)
            oprot.writeFieldEnd()
        if self.niceUsage is not None:
            oprot.writeFieldBegin('niceUsage', TType.STRING, 2)
            oprot.writeString(self.niceUsage.encode('utf-8') if sys.version_info[0] == 2 else self.niceUsage)
            oprot.writeFieldEnd()
        if self.systemUsage is not None:
            oprot.writeFieldBegin('systemUsage', TType.STRING, 3)
            oprot.writeString(self.systemUsage.encode('utf-8') if sys.version_info[0] == 2 else self.systemUsage)
            oprot.writeFieldEnd()
        if self.iowaitUsage is not None:
            oprot.writeFieldBegin('iowaitUsage', TType.STRING, 4)
            oprot.writeString(self.iowaitUsage.encode('utf-8') if sys.version_info[0] == 2 else self.iowaitUsage)
            oprot.writeFieldEnd()
        if self.stealUsage is not None:
            oprot.writeFieldBegin('stealUsage', TType.STRING, 5)
            oprot.writeString(self.stealUsage.encode('utf-8') if sys.version_info[0] == 2 else self.stealUsage)
            oprot.writeFieldEnd()
        if self.idleUsage is not None:
            oprot.writeFieldBegin('idleUsage', TType.STRING, 6)
            oprot.writeString(self.idleUsage.encode('utf-8') if sys.version_info[0] == 2 else self.idleUsage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.userUsage is None:
            raise TProtocolException(message='Required field userUsage is unset!')
        if self.niceUsage is None:
            raise TProtocolException(message='Required field niceUsage is unset!')
        if self.systemUsage is None:
            raise TProtocolException(message='Required field systemUsage is unset!')
        if self.iowaitUsage is None:
            raise TProtocolException(message='Required field iowaitUsage is unset!')
        if self.stealUsage is None:
            raise TProtocolException(message='Required field stealUsage is unset!')
        if self.idleUsage is None:
            raise TProtocolException(message='Required field idleUsage is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TExecuteIostatDevice(object):
    """
    Attributes:
     - device
     - tps
     - kB_read_pers
     - kB_wrtn_pers
     - kB_read
     - kB_wrtn

    """


    def __init__(self, device=None, tps=None, kB_read_pers=None, kB_wrtn_pers=None, kB_read=None, kB_wrtn=None,):
        self.device = device
        self.tps = tps
        self.kB_read_pers = kB_read_pers
        self.kB_wrtn_pers = kB_wrtn_pers
        self.kB_read = kB_read
        self.kB_wrtn = kB_wrtn

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.device = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tps = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.kB_read_pers = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.kB_wrtn_pers = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.kB_read = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.kB_wrtn = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TExecuteIostatDevice')
        if self.device is not None:
            oprot.writeFieldBegin('device', TType.STRING, 1)
            oprot.writeString(self.device.encode('utf-8') if sys.version_info[0] == 2 else self.device)
            oprot.writeFieldEnd()
        if self.tps is not None:
            oprot.writeFieldBegin('tps', TType.STRING, 2)
            oprot.writeString(self.tps.encode('utf-8') if sys.version_info[0] == 2 else self.tps)
            oprot.writeFieldEnd()
        if self.kB_read_pers is not None:
            oprot.writeFieldBegin('kB_read_pers', TType.STRING, 3)
            oprot.writeString(self.kB_read_pers.encode('utf-8') if sys.version_info[0] == 2 else self.kB_read_pers)
            oprot.writeFieldEnd()
        if self.kB_wrtn_pers is not None:
            oprot.writeFieldBegin('kB_wrtn_pers', TType.STRING, 4)
            oprot.writeString(self.kB_wrtn_pers.encode('utf-8') if sys.version_info[0] == 2 else self.kB_wrtn_pers)
            oprot.writeFieldEnd()
        if self.kB_read is not None:
            oprot.writeFieldBegin('kB_read', TType.STRING, 5)
            oprot.writeString(self.kB_read.encode('utf-8') if sys.version_info[0] == 2 else self.kB_read)
            oprot.writeFieldEnd()
        if self.kB_wrtn is not None:
            oprot.writeFieldBegin('kB_wrtn', TType.STRING, 6)
            oprot.writeString(self.kB_wrtn.encode('utf-8') if sys.version_info[0] == 2 else self.kB_wrtn)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.device is None:
            raise TProtocolException(message='Required field device is unset!')
        if self.tps is None:
            raise TProtocolException(message='Required field tps is unset!')
        if self.kB_read_pers is None:
            raise TProtocolException(message='Required field kB_read_pers is unset!')
        if self.kB_wrtn_pers is None:
            raise TProtocolException(message='Required field kB_wrtn_pers is unset!')
        if self.kB_read is None:
            raise TProtocolException(message='Required field kB_read is unset!')
        if self.kB_wrtn is None:
            raise TProtocolException(message='Required field kB_wrtn is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TJvmGcDetailed(object):
    """
    Attributes:
     - jvmGcNewCount
     - jvmGcNewTime
     - jvmPoolCodeCacheUsage
     - jvmPoolCodeCacheMax
     - jvmPoolCodeCacheUsed
     - jvmPoolCodeCacheCommitted
     - jvmPoolCodeCacheInit
     - jvmPoolNewGenUsage
     - jvmPoolNewGenMax
     - jvmPoolNewGenUsed
     - jvmPoolNewGenCommitted
     - jvmPoolNewGenInit
     - jvmPoolOldGenUsage
     - jvmPoolOldGenMax
     - jvmPoolOldGenUsed
     - jvmPoolOldGenCommitted
     - jvmPoolOldGenInit
     - jvmPoolSurvivorSpaceUsage
     - jvmPoolSurvivorSpaceMax
     - jvmPoolSurvivorSpaceUsed
     - jvmPoolSurvivorSpaceCommitted
     - jvmPoolSurvivorSpaceInit
     - jvmPoolPermGenUsage
     - jvmPoolPermGenMax
     - jvmPoolPermGenUsed
     - jvmPoolPermGenCommitted
     - jvmPoolPermGenInit
     - jvmPoolMetaspaceUsage
     - jvmPoolMetaspaceMax
     - jvmPoolMetaspaceUsed
     - jvmPoolMetaspaceCommitted
     - jvmPoolMetaspaceInit

    """


    def __init__(self, jvmGcNewCount=None, jvmGcNewTime=None, jvmPoolCodeCacheUsage=None, jvmPoolCodeCacheMax=None, jvmPoolCodeCacheUsed=None, jvmPoolCodeCacheCommitted=None, jvmPoolCodeCacheInit=None, jvmPoolNewGenUsage=None, jvmPoolNewGenMax=None, jvmPoolNewGenUsed=None, jvmPoolNewGenCommitted=None, jvmPoolNewGenInit=None, jvmPoolOldGenUsage=None, jvmPoolOldGenMax=None, jvmPoolOldGenUsed=None, jvmPoolOldGenCommitted=None, jvmPoolOldGenInit=None, jvmPoolSurvivorSpaceUsage=None, jvmPoolSurvivorSpaceMax=None, jvmPoolSurvivorSpaceUsed=None, jvmPoolSurvivorSpaceCommitted=None, jvmPoolSurvivorSpaceInit=None, jvmPoolPermGenUsage=None, jvmPoolPermGenMax=None, jvmPoolPermGenUsed=None, jvmPoolPermGenCommitted=None, jvmPoolPermGenInit=None, jvmPoolMetaspaceUsage=None, jvmPoolMetaspaceMax=None, jvmPoolMetaspaceUsed=None, jvmPoolMetaspaceCommitted=None, jvmPoolMetaspaceInit=None,):
        self.jvmGcNewCount = jvmGcNewCount
        self.jvmGcNewTime = jvmGcNewTime
        self.jvmPoolCodeCacheUsage = jvmPoolCodeCacheUsage
        self.jvmPoolCodeCacheMax = jvmPoolCodeCacheMax
        self.jvmPoolCodeCacheUsed = jvmPoolCodeCacheUsed
        self.jvmPoolCodeCacheCommitted = jvmPoolCodeCacheCommitted
        self.jvmPoolCodeCacheInit = jvmPoolCodeCacheInit
        self.jvmPoolNewGenUsage = jvmPoolNewGenUsage
        self.jvmPoolNewGenMax = jvmPoolNewGenMax
        self.jvmPoolNewGenUsed = jvmPoolNewGenUsed
        self.jvmPoolNewGenCommitted = jvmPoolNewGenCommitted
        self.jvmPoolNewGenInit = jvmPoolNewGenInit
        self.jvmPoolOldGenUsage = jvmPoolOldGenUsage
        self.jvmPoolOldGenMax = jvmPoolOldGenMax
        self.jvmPoolOldGenUsed = jvmPoolOldGenUsed
        self.jvmPoolOldGenCommitted = jvmPoolOldGenCommitted
        self.jvmPoolOldGenInit = jvmPoolOldGenInit
        self.jvmPoolSurvivorSpaceUsage = jvmPoolSurvivorSpaceUsage
        self.jvmPoolSurvivorSpaceMax = jvmPoolSurvivorSpaceMax
        self.jvmPoolSurvivorSpaceUsed = jvmPoolSurvivorSpaceUsed
        self.jvmPoolSurvivorSpaceCommitted = jvmPoolSurvivorSpaceCommitted
        self.jvmPoolSurvivorSpaceInit = jvmPoolSurvivorSpaceInit
        self.jvmPoolPermGenUsage = jvmPoolPermGenUsage
        self.jvmPoolPermGenMax = jvmPoolPermGenMax
        self.jvmPoolPermGenUsed = jvmPoolPermGenUsed
        self.jvmPoolPermGenCommitted = jvmPoolPermGenCommitted
        self.jvmPoolPermGenInit = jvmPoolPermGenInit
        self.jvmPoolMetaspaceUsage = jvmPoolMetaspaceUsage
        self.jvmPoolMetaspaceMax = jvmPoolMetaspaceMax
        self.jvmPoolMetaspaceUsed = jvmPoolMetaspaceUsed
        self.jvmPoolMetaspaceCommitted = jvmPoolMetaspaceCommitted
        self.jvmPoolMetaspaceInit = jvmPoolMetaspaceInit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.jvmGcNewCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.jvmGcNewTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.jvmPoolCodeCacheUsage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.jvmPoolCodeCacheMax = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.jvmPoolCodeCacheUsed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.jvmPoolCodeCacheCommitted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.jvmPoolCodeCacheInit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.jvmPoolNewGenUsage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.jvmPoolNewGenMax = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.jvmPoolNewGenUsed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.jvmPoolNewGenCommitted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.jvmPoolNewGenInit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.DOUBLE:
                    self.jvmPoolOldGenUsage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.jvmPoolOldGenMax = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.jvmPoolOldGenUsed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.jvmPoolOldGenCommitted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.jvmPoolOldGenInit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.DOUBLE:
                    self.jvmPoolSurvivorSpaceUsage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I64:
                    self.jvmPoolSurvivorSpaceMax = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I64:
                    self.jvmPoolSurvivorSpaceUsed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I64:
                    self.jvmPoolSurvivorSpaceCommitted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I64:
                    self.jvmPoolSurvivorSpaceInit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.DOUBLE:
                    self.jvmPoolPermGenUsage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I64:
                    self.jvmPoolPermGenMax = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I64:
                    self.jvmPoolPermGenUsed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.I64:
                    self.jvmPoolPermGenCommitted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I64:
                    self.jvmPoolPermGenInit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.DOUBLE:
                    self.jvmPoolMetaspaceUsage = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.I64:
                    self.jvmPoolMetaspaceMax = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.I64:
                    self.jvmPoolMetaspaceUsed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I64:
                    self.jvmPoolMetaspaceCommitted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.I64:
                    self.jvmPoolMetaspaceInit = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TJvmGcDetailed')
        if self.jvmGcNewCount is not None:
            oprot.writeFieldBegin('jvmGcNewCount', TType.I64, 1)
            oprot.writeI64(self.jvmGcNewCount)
            oprot.writeFieldEnd()
        if self.jvmGcNewTime is not None:
            oprot.writeFieldBegin('jvmGcNewTime', TType.I64, 2)
            oprot.writeI64(self.jvmGcNewTime)
            oprot.writeFieldEnd()
        if self.jvmPoolCodeCacheUsage is not None:
            oprot.writeFieldBegin('jvmPoolCodeCacheUsage', TType.DOUBLE, 3)
            oprot.writeDouble(self.jvmPoolCodeCacheUsage)
            oprot.writeFieldEnd()
        if self.jvmPoolCodeCacheMax is not None:
            oprot.writeFieldBegin('jvmPoolCodeCacheMax', TType.I64, 4)
            oprot.writeI64(self.jvmPoolCodeCacheMax)
            oprot.writeFieldEnd()
        if self.jvmPoolCodeCacheUsed is not None:
            oprot.writeFieldBegin('jvmPoolCodeCacheUsed', TType.I64, 5)
            oprot.writeI64(self.jvmPoolCodeCacheUsed)
            oprot.writeFieldEnd()
        if self.jvmPoolCodeCacheCommitted is not None:
            oprot.writeFieldBegin('jvmPoolCodeCacheCommitted', TType.I64, 6)
            oprot.writeI64(self.jvmPoolCodeCacheCommitted)
            oprot.writeFieldEnd()
        if self.jvmPoolCodeCacheInit is not None:
            oprot.writeFieldBegin('jvmPoolCodeCacheInit', TType.I64, 7)
            oprot.writeI64(self.jvmPoolCodeCacheInit)
            oprot.writeFieldEnd()
        if self.jvmPoolNewGenUsage is not None:
            oprot.writeFieldBegin('jvmPoolNewGenUsage', TType.DOUBLE, 8)
            oprot.writeDouble(self.jvmPoolNewGenUsage)
            oprot.writeFieldEnd()
        if self.jvmPoolNewGenMax is not None:
            oprot.writeFieldBegin('jvmPoolNewGenMax', TType.I64, 9)
            oprot.writeI64(self.jvmPoolNewGenMax)
            oprot.writeFieldEnd()
        if self.jvmPoolNewGenUsed is not None:
            oprot.writeFieldBegin('jvmPoolNewGenUsed', TType.I64, 10)
            oprot.writeI64(self.jvmPoolNewGenUsed)
            oprot.writeFieldEnd()
        if self.jvmPoolNewGenCommitted is not None:
            oprot.writeFieldBegin('jvmPoolNewGenCommitted', TType.I64, 11)
            oprot.writeI64(self.jvmPoolNewGenCommitted)
            oprot.writeFieldEnd()
        if self.jvmPoolNewGenInit is not None:
            oprot.writeFieldBegin('jvmPoolNewGenInit', TType.I64, 12)
            oprot.writeI64(self.jvmPoolNewGenInit)
            oprot.writeFieldEnd()
        if self.jvmPoolOldGenUsage is not None:
            oprot.writeFieldBegin('jvmPoolOldGenUsage', TType.DOUBLE, 13)
            oprot.writeDouble(self.jvmPoolOldGenUsage)
            oprot.writeFieldEnd()
        if self.jvmPoolOldGenMax is not None:
            oprot.writeFieldBegin('jvmPoolOldGenMax', TType.I64, 14)
            oprot.writeI64(self.jvmPoolOldGenMax)
            oprot.writeFieldEnd()
        if self.jvmPoolOldGenUsed is not None:
            oprot.writeFieldBegin('jvmPoolOldGenUsed', TType.I64, 15)
            oprot.writeI64(self.jvmPoolOldGenUsed)
            oprot.writeFieldEnd()
        if self.jvmPoolOldGenCommitted is not None:
            oprot.writeFieldBegin('jvmPoolOldGenCommitted', TType.I64, 16)
            oprot.writeI64(self.jvmPoolOldGenCommitted)
            oprot.writeFieldEnd()
        if self.jvmPoolOldGenInit is not None:
            oprot.writeFieldBegin('jvmPoolOldGenInit', TType.I64, 17)
            oprot.writeI64(self.jvmPoolOldGenInit)
            oprot.writeFieldEnd()
        if self.jvmPoolSurvivorSpaceUsage is not None:
            oprot.writeFieldBegin('jvmPoolSurvivorSpaceUsage', TType.DOUBLE, 18)
            oprot.writeDouble(self.jvmPoolSurvivorSpaceUsage)
            oprot.writeFieldEnd()
        if self.jvmPoolSurvivorSpaceMax is not None:
            oprot.writeFieldBegin('jvmPoolSurvivorSpaceMax', TType.I64, 19)
            oprot.writeI64(self.jvmPoolSurvivorSpaceMax)
            oprot.writeFieldEnd()
        if self.jvmPoolSurvivorSpaceUsed is not None:
            oprot.writeFieldBegin('jvmPoolSurvivorSpaceUsed', TType.I64, 20)
            oprot.writeI64(self.jvmPoolSurvivorSpaceUsed)
            oprot.writeFieldEnd()
        if self.jvmPoolSurvivorSpaceCommitted is not None:
            oprot.writeFieldBegin('jvmPoolSurvivorSpaceCommitted', TType.I64, 21)
            oprot.writeI64(self.jvmPoolSurvivorSpaceCommitted)
            oprot.writeFieldEnd()
        if self.jvmPoolSurvivorSpaceInit is not None:
            oprot.writeFieldBegin('jvmPoolSurvivorSpaceInit', TType.I64, 22)
            oprot.writeI64(self.jvmPoolSurvivorSpaceInit)
            oprot.writeFieldEnd()
        if self.jvmPoolPermGenUsage is not None:
            oprot.writeFieldBegin('jvmPoolPermGenUsage', TType.DOUBLE, 23)
            oprot.writeDouble(self.jvmPoolPermGenUsage)
            oprot.writeFieldEnd()
        if self.jvmPoolPermGenMax is not None:
            oprot.writeFieldBegin('jvmPoolPermGenMax', TType.I64, 24)
            oprot.writeI64(self.jvmPoolPermGenMax)
            oprot.writeFieldEnd()
        if self.jvmPoolPermGenUsed is not None:
            oprot.writeFieldBegin('jvmPoolPermGenUsed', TType.I64, 25)
            oprot.writeI64(self.jvmPoolPermGenUsed)
            oprot.writeFieldEnd()
        if self.jvmPoolPermGenCommitted is not None:
            oprot.writeFieldBegin('jvmPoolPermGenCommitted', TType.I64, 26)
            oprot.writeI64(self.jvmPoolPermGenCommitted)
            oprot.writeFieldEnd()
        if self.jvmPoolPermGenInit is not None:
            oprot.writeFieldBegin('jvmPoolPermGenInit', TType.I64, 27)
            oprot.writeI64(self.jvmPoolPermGenInit)
            oprot.writeFieldEnd()
        if self.jvmPoolMetaspaceUsage is not None:
            oprot.writeFieldBegin('jvmPoolMetaspaceUsage', TType.DOUBLE, 28)
            oprot.writeDouble(self.jvmPoolMetaspaceUsage)
            oprot.writeFieldEnd()
        if self.jvmPoolMetaspaceMax is not None:
            oprot.writeFieldBegin('jvmPoolMetaspaceMax', TType.I64, 29)
            oprot.writeI64(self.jvmPoolMetaspaceMax)
            oprot.writeFieldEnd()
        if self.jvmPoolMetaspaceUsed is not None:
            oprot.writeFieldBegin('jvmPoolMetaspaceUsed', TType.I64, 30)
            oprot.writeI64(self.jvmPoolMetaspaceUsed)
            oprot.writeFieldEnd()
        if self.jvmPoolMetaspaceCommitted is not None:
            oprot.writeFieldBegin('jvmPoolMetaspaceCommitted', TType.I64, 31)
            oprot.writeI64(self.jvmPoolMetaspaceCommitted)
            oprot.writeFieldEnd()
        if self.jvmPoolMetaspaceInit is not None:
            oprot.writeFieldBegin('jvmPoolMetaspaceInit', TType.I64, 32)
            oprot.writeI64(self.jvmPoolMetaspaceInit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TCpuLoad(object):
    """
    Attributes:
     - jvmCpuLoad
     - systemCpuLoad

    """


    def __init__(self, jvmCpuLoad=None, systemCpuLoad=None,):
        self.jvmCpuLoad = jvmCpuLoad
        self.systemCpuLoad = systemCpuLoad

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.jvmCpuLoad = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.systemCpuLoad = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TCpuLoad')
        if self.jvmCpuLoad is not None:
            oprot.writeFieldBegin('jvmCpuLoad', TType.I64, 1)
            oprot.writeI64(self.jvmCpuLoad)
            oprot.writeFieldEnd()
        if self.systemCpuLoad is not None:
            oprot.writeFieldBegin('systemCpuLoad', TType.I64, 2)
            oprot.writeI64(self.systemCpuLoad)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TTransaction(object):
    """
    Attributes:
     - sampledNewCount
     - sampledContinuationCount
     - unsampledNewCount
     - unsampledContinuationCount

    """


    def __init__(self, sampledNewCount=None, sampledContinuationCount=None, unsampledNewCount=None, unsampledContinuationCount=None,):
        self.sampledNewCount = sampledNewCount
        self.sampledContinuationCount = sampledContinuationCount
        self.unsampledNewCount = unsampledNewCount
        self.unsampledContinuationCount = unsampledContinuationCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.I64:
                    self.sampledNewCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.sampledContinuationCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.unsampledNewCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.unsampledContinuationCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TTransaction')
        if self.sampledNewCount is not None:
            oprot.writeFieldBegin('sampledNewCount', TType.I64, 2)
            oprot.writeI64(self.sampledNewCount)
            oprot.writeFieldEnd()
        if self.sampledContinuationCount is not None:
            oprot.writeFieldBegin('sampledContinuationCount', TType.I64, 3)
            oprot.writeI64(self.sampledContinuationCount)
            oprot.writeFieldEnd()
        if self.unsampledNewCount is not None:
            oprot.writeFieldBegin('unsampledNewCount', TType.I64, 4)
            oprot.writeI64(self.unsampledNewCount)
            oprot.writeFieldEnd()
        if self.unsampledContinuationCount is not None:
            oprot.writeFieldBegin('unsampledContinuationCount', TType.I64, 5)
            oprot.writeI64(self.unsampledContinuationCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TActiveTraceHistogram(object):
    """
    Attributes:
     - version
     - histogramSchemaType
     - activeTraceCount

    """


    def __init__(self, version=0, histogramSchemaType=None, activeTraceCount=None,):
        self.version = version
        self.histogramSchemaType = histogramSchemaType
        self.activeTraceCount = activeTraceCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.version = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.histogramSchemaType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.activeTraceCount = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readI32()
                        self.activeTraceCount.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TActiveTraceHistogram')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I16, 1)
            oprot.writeI16(self.version)
            oprot.writeFieldEnd()
        if self.histogramSchemaType is not None:
            oprot.writeFieldBegin('histogramSchemaType', TType.I32, 2)
            oprot.writeI32(self.histogramSchemaType)
            oprot.writeFieldEnd()
        if self.activeTraceCount is not None:
            oprot.writeFieldBegin('activeTraceCount', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.activeTraceCount))
            for iter41 in self.activeTraceCount:
                oprot.writeI32(iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.version is None:
            raise TProtocolException(message='Required field version is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TActiveTrace(object):
    """
    Attributes:
     - histogram

    """


    def __init__(self, histogram=None,):
        self.histogram = histogram

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.histogram = TActiveTraceHistogram()
                    self.histogram.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TActiveTrace')
        if self.histogram is not None:
            oprot.writeFieldBegin('histogram', TType.STRUCT, 1)
            self.histogram.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAgentStat(object):
    """
    Attributes:
     - agentId
     - startTimestamp
     - timestamp
     - collectInterval
     - gc
     - cpuLoad
     - transaction
     - activeTrace
     - metadata
     - threadCount

    """


    def __init__(self, agentId=None, startTimestamp=None, timestamp=None, collectInterval=None, gc=None, cpuLoad=None, transaction=None, activeTrace=None, metadata=None, threadCount=None,):
        self.agentId = agentId
        self.startTimestamp = startTimestamp
        self.timestamp = timestamp
        self.collectInterval = collectInterval
        self.gc = gc
        self.cpuLoad = cpuLoad
        self.transaction = transaction
        self.activeTrace = activeTrace
        self.metadata = metadata
        self.threadCount = threadCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.startTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.collectInterval = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.gc = TJvmGc()
                    self.gc.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.cpuLoad = TCpuLoad()
                    self.cpuLoad.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRUCT:
                    self.transaction = TTransaction()
                    self.transaction.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRUCT:
                    self.activeTrace = TActiveTrace()
                    self.activeTrace.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 200:
                if ftype == TType.STRING:
                    self.metadata = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 210:
                if ftype == TType.I32:
                    self.threadCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAgentStat')
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 1)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.startTimestamp is not None:
            oprot.writeFieldBegin('startTimestamp', TType.I64, 2)
            oprot.writeI64(self.startTimestamp)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 3)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.collectInterval is not None:
            oprot.writeFieldBegin('collectInterval', TType.I64, 4)
            oprot.writeI64(self.collectInterval)
            oprot.writeFieldEnd()
        if self.gc is not None:
            oprot.writeFieldBegin('gc', TType.STRUCT, 10)
            self.gc.write(oprot)
            oprot.writeFieldEnd()
        if self.cpuLoad is not None:
            oprot.writeFieldBegin('cpuLoad', TType.STRUCT, 20)
            self.cpuLoad.write(oprot)
            oprot.writeFieldEnd()
        if self.transaction is not None:
            oprot.writeFieldBegin('transaction', TType.STRUCT, 30)
            self.transaction.write(oprot)
            oprot.writeFieldEnd()
        if self.activeTrace is not None:
            oprot.writeFieldBegin('activeTrace', TType.STRUCT, 40)
            self.activeTrace.write(oprot)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRING, 200)
            oprot.writeString(self.metadata.encode('utf-8') if sys.version_info[0] == 2 else self.metadata)
            oprot.writeFieldEnd()
        if self.threadCount is not None:
            oprot.writeFieldBegin('threadCount', TType.I32, 210)
            oprot.writeI32(self.threadCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAgentStatBatch(object):
    """
    Attributes:
     - agentId
     - startTimestamp
     - appKey
     - appId
     - tenant
     - agentStats
     - serviceType

    """


    def __init__(self, agentId=None, startTimestamp=None, appKey=None, appId=None, tenant=None, agentStats=None, serviceType=None,):
        self.agentId = agentId
        self.startTimestamp = startTimestamp
        self.appKey = appKey
        self.appId = appId
        self.tenant = tenant
        self.agentStats = agentStats
        self.serviceType = serviceType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.startTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.appKey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.tenant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.agentStats = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = TAgentStat()
                        _elem47.read(iprot)
                        self.agentStats.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I16:
                    self.serviceType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAgentStatBatch')
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 1)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.startTimestamp is not None:
            oprot.writeFieldBegin('startTimestamp', TType.I64, 2)
            oprot.writeI64(self.startTimestamp)
            oprot.writeFieldEnd()
        if self.appKey is not None:
            oprot.writeFieldBegin('appKey', TType.STRING, 3)
            oprot.writeString(self.appKey.encode('utf-8') if sys.version_info[0] == 2 else self.appKey)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 4)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        if self.tenant is not None:
            oprot.writeFieldBegin('tenant', TType.STRING, 5)
            oprot.writeString(self.tenant.encode('utf-8') if sys.version_info[0] == 2 else self.tenant)
            oprot.writeFieldEnd()
        if self.agentStats is not None:
            oprot.writeFieldBegin('agentStats', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.agentStats))
            for iter48 in self.agentStats:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.serviceType is not None:
            oprot.writeFieldBegin('serviceType', TType.I16, 11)
            oprot.writeI16(self.serviceType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.agentId is None:
            raise TProtocolException(message='Required field agentId is unset!')
        if self.startTimestamp is None:
            raise TProtocolException(message='Required field startTimestamp is unset!')
        if self.appKey is None:
            raise TProtocolException(message='Required field appKey is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.tenant is None:
            raise TProtocolException(message='Required field tenant is unset!')
        if self.agentStats is None:
            raise TProtocolException(message='Required field agentStats is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAgentLifeCycle(object):
    """
    Attributes:
     - appkey
     - appId
     - tenant
     - agentId
     - startTimestamp
     - eventTimestamp
     - status
     - duration
     - serviceType

    """


    def __init__(self, appkey=None, appId=None, tenant=None, agentId=None, startTimestamp=None, eventTimestamp=None, status=None, duration=None, serviceType=None,):
        self.appkey = appkey
        self.appId = appId
        self.tenant = tenant
        self.agentId = agentId
        self.startTimestamp = startTimestamp
        self.eventTimestamp = eventTimestamp
        self.status = status
        self.duration = duration
        self.serviceType = serviceType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.appkey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tenant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.startTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.eventTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.duration = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I16:
                    self.serviceType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAgentLifeCycle')
        if self.appkey is not None:
            oprot.writeFieldBegin('appkey', TType.STRING, 1)
            oprot.writeString(self.appkey.encode('utf-8') if sys.version_info[0] == 2 else self.appkey)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 2)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        if self.tenant is not None:
            oprot.writeFieldBegin('tenant', TType.STRING, 3)
            oprot.writeString(self.tenant.encode('utf-8') if sys.version_info[0] == 2 else self.tenant)
            oprot.writeFieldEnd()
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 5)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.startTimestamp is not None:
            oprot.writeFieldBegin('startTimestamp', TType.I64, 6)
            oprot.writeI64(self.startTimestamp)
            oprot.writeFieldEnd()
        if self.eventTimestamp is not None:
            oprot.writeFieldBegin('eventTimestamp', TType.I64, 7)
            oprot.writeI64(self.eventTimestamp)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 8)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.duration is not None:
            oprot.writeFieldBegin('duration', TType.I32, 9)
            oprot.writeI32(self.duration)
            oprot.writeFieldEnd()
        if self.serviceType is not None:
            oprot.writeFieldBegin('serviceType', TType.I16, 10)
            oprot.writeI16(self.serviceType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.appkey is None:
            raise TProtocolException(message='Required field appkey is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.tenant is None:
            raise TProtocolException(message='Required field tenant is unset!')
        if self.agentId is None:
            raise TProtocolException(message='Required field agentId is unset!')
        if self.startTimestamp is None:
            raise TProtocolException(message='Required field startTimestamp is unset!')
        if self.eventTimestamp is None:
            raise TProtocolException(message='Required field eventTimestamp is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.duration is None:
            raise TProtocolException(message='Required field duration is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAgentEventType(object):
    """
    Attributes:
     - code
     - desc

    """


    def __init__(self, code=None, desc=None,):
        self.code = code
        self.desc = desc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAgentEventType')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 2)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        if self.desc is None:
            raise TProtocolException(message='Required field desc is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAgentEvent(object):
    """
    Attributes:
     - appkey
     - agentId
     - eventTimestamp
     - eventType
     - eventMessage

    """


    def __init__(self, appkey=None, agentId=None, eventTimestamp=None, eventType=None, eventMessage=None,):
        self.appkey = appkey
        self.agentId = agentId
        self.eventTimestamp = eventTimestamp
        self.eventType = eventType
        self.eventMessage = eventMessage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.appkey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.eventTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.eventType = TAgentEventType()
                    self.eventType.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.eventMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAgentEvent')
        if self.appkey is not None:
            oprot.writeFieldBegin('appkey', TType.STRING, 1)
            oprot.writeString(self.appkey.encode('utf-8') if sys.version_info[0] == 2 else self.appkey)
            oprot.writeFieldEnd()
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 5)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.eventTimestamp is not None:
            oprot.writeFieldBegin('eventTimestamp', TType.I64, 6)
            oprot.writeI64(self.eventTimestamp)
            oprot.writeFieldEnd()
        if self.eventType is not None:
            oprot.writeFieldBegin('eventType', TType.STRUCT, 7)
            self.eventType.write(oprot)
            oprot.writeFieldEnd()
        if self.eventMessage is not None:
            oprot.writeFieldBegin('eventMessage', TType.STRING, 8)
            oprot.writeString(self.eventMessage.encode('utf-8') if sys.version_info[0] == 2 else self.eventMessage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.appkey is None:
            raise TProtocolException(message='Required field appkey is unset!')
        if self.agentId is None:
            raise TProtocolException(message='Required field agentId is unset!')
        if self.eventTimestamp is None:
            raise TProtocolException(message='Required field eventTimestamp is unset!')
        if self.eventType is None:
            raise TProtocolException(message='Required field eventType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LockedMonitorInfo(object):
    """
    Attributes:
     - stackDepth
     - stackTraceElement
     - className
     - identityHashCode

    """


    def __init__(self, stackDepth=None, stackTraceElement=None, className=None, identityHashCode=None,):
        self.stackDepth = stackDepth
        self.stackTraceElement = stackTraceElement
        self.className = className
        self.identityHashCode = identityHashCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.stackDepth = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.stackTraceElement = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.className = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.identityHashCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LockedMonitorInfo')
        if self.stackDepth is not None:
            oprot.writeFieldBegin('stackDepth', TType.I32, 1)
            oprot.writeI32(self.stackDepth)
            oprot.writeFieldEnd()
        if self.stackTraceElement is not None:
            oprot.writeFieldBegin('stackTraceElement', TType.STRING, 2)
            oprot.writeString(self.stackTraceElement.encode('utf-8') if sys.version_info[0] == 2 else self.stackTraceElement)
            oprot.writeFieldEnd()
        if self.className is not None:
            oprot.writeFieldBegin('className', TType.STRING, 3)
            oprot.writeString(self.className.encode('utf-8') if sys.version_info[0] == 2 else self.className)
            oprot.writeFieldEnd()
        if self.identityHashCode is not None:
            oprot.writeFieldBegin('identityHashCode', TType.I32, 4)
            oprot.writeI32(self.identityHashCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.stackDepth is None:
            raise TProtocolException(message='Required field stackDepth is unset!')
        if self.stackTraceElement is None:
            raise TProtocolException(message='Required field stackTraceElement is unset!')
        if self.className is None:
            raise TProtocolException(message='Required field className is unset!')
        if self.identityHashCode is None:
            raise TProtocolException(message='Required field identityHashCode is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ThreadDetailStackTraceElement(object):
    """
    Attributes:
     - className
     - methodName
     - fileName
     - lineNumber

    """


    def __init__(self, className=None, methodName=None, fileName=None, lineNumber=None,):
        self.className = className
        self.methodName = methodName
        self.fileName = fileName
        self.lineNumber = lineNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.className = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.methodName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.lineNumber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ThreadDetailStackTraceElement')
        if self.className is not None:
            oprot.writeFieldBegin('className', TType.STRING, 1)
            oprot.writeString(self.className.encode('utf-8') if sys.version_info[0] == 2 else self.className)
            oprot.writeFieldEnd()
        if self.methodName is not None:
            oprot.writeFieldBegin('methodName', TType.STRING, 2)
            oprot.writeString(self.methodName.encode('utf-8') if sys.version_info[0] == 2 else self.methodName)
            oprot.writeFieldEnd()
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 3)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.lineNumber is not None:
            oprot.writeFieldBegin('lineNumber', TType.I32, 4)
            oprot.writeI32(self.lineNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.className is None:
            raise TProtocolException(message='Required field className is unset!')
        if self.methodName is None:
            raise TProtocolException(message='Required field methodName is unset!')
        if self.fileName is None:
            raise TProtocolException(message='Required field fileName is unset!')
        if self.lineNumber is None:
            raise TProtocolException(message='Required field lineNumber is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAgentThreadDetail(object):
    """
    Attributes:
     - name
     - group
     - cpuTime
     - state
     - ownedMonitors
     - waitOn
     - priority
     - threadId
     - stackTraceElements

    """


    def __init__(self, name=None, group=None, cpuTime=None, state=None, ownedMonitors=None, waitOn=None, priority=None, threadId=None, stackTraceElements=None,):
        self.name = name
        self.group = group
        self.cpuTime = cpuTime
        self.state = state
        self.ownedMonitors = ownedMonitors
        self.waitOn = waitOn
        self.priority = priority
        self.threadId = threadId
        self.stackTraceElements = stackTraceElements

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.group = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.cpuTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.state = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.ownedMonitors = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = LockedMonitorInfo()
                        _elem54.read(iprot)
                        self.ownedMonitors.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.waitOn = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.threadId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.stackTraceElements = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = ThreadDetailStackTraceElement()
                        _elem60.read(iprot)
                        self.stackTraceElements.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAgentThreadDetail')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.group is not None:
            oprot.writeFieldBegin('group', TType.STRING, 2)
            oprot.writeString(self.group.encode('utf-8') if sys.version_info[0] == 2 else self.group)
            oprot.writeFieldEnd()
        if self.cpuTime is not None:
            oprot.writeFieldBegin('cpuTime', TType.I64, 3)
            oprot.writeI64(self.cpuTime)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRING, 4)
            oprot.writeString(self.state.encode('utf-8') if sys.version_info[0] == 2 else self.state)
            oprot.writeFieldEnd()
        if self.ownedMonitors is not None:
            oprot.writeFieldBegin('ownedMonitors', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.ownedMonitors))
            for iter61 in self.ownedMonitors:
                iter61.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.waitOn is not None:
            oprot.writeFieldBegin('waitOn', TType.STRING, 6)
            oprot.writeString(self.waitOn.encode('utf-8') if sys.version_info[0] == 2 else self.waitOn)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 7)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.threadId is not None:
            oprot.writeFieldBegin('threadId', TType.I64, 8)
            oprot.writeI64(self.threadId)
            oprot.writeFieldEnd()
        if self.stackTraceElements is not None:
            oprot.writeFieldBegin('stackTraceElements', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.stackTraceElements))
            for iter62 in self.stackTraceElements:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.group is None:
            raise TProtocolException(message='Required field group is unset!')
        if self.cpuTime is None:
            raise TProtocolException(message='Required field cpuTime is unset!')
        if self.state is None:
            raise TProtocolException(message='Required field state is unset!')
        if self.waitOn is None:
            raise TProtocolException(message='Required field waitOn is unset!')
        if self.priority is None:
            raise TProtocolException(message='Required field priority is unset!')
        if self.threadId is None:
            raise TProtocolException(message='Required field threadId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAgentThread(object):
    """
    Attributes:
     - appkey
     - id
     - applicationName
     - agentId
     - ts
     - isDeadLock
     - deadLockMessage
     - threadDetail
     - analysisid
     - appId
     - tenant

    """


    def __init__(self, appkey=None, id=None, applicationName=None, agentId=None, ts=None, isDeadLock=None, deadLockMessage=None, threadDetail=None, analysisid=None, appId=None, tenant=None,):
        self.appkey = appkey
        self.id = id
        self.applicationName = applicationName
        self.agentId = agentId
        self.ts = ts
        self.isDeadLock = isDeadLock
        self.deadLockMessage = deadLockMessage
        self.threadDetail = threadDetail
        self.analysisid = analysisid
        self.appId = appId
        self.tenant = tenant

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.appkey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.applicationName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.ts = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.isDeadLock = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.deadLockMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.threadDetail = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = TAgentThreadDetail()
                        _elem68.read(iprot)
                        self.threadDetail.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.analysisid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.tenant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAgentThread')
        if self.appkey is not None:
            oprot.writeFieldBegin('appkey', TType.STRING, 1)
            oprot.writeString(self.appkey.encode('utf-8') if sys.version_info[0] == 2 else self.appkey)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 2)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.applicationName is not None:
            oprot.writeFieldBegin('applicationName', TType.STRING, 4)
            oprot.writeString(self.applicationName.encode('utf-8') if sys.version_info[0] == 2 else self.applicationName)
            oprot.writeFieldEnd()
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 5)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.ts is not None:
            oprot.writeFieldBegin('ts', TType.I64, 6)
            oprot.writeI64(self.ts)
            oprot.writeFieldEnd()
        if self.isDeadLock is not None:
            oprot.writeFieldBegin('isDeadLock', TType.BOOL, 7)
            oprot.writeBool(self.isDeadLock)
            oprot.writeFieldEnd()
        if self.deadLockMessage is not None:
            oprot.writeFieldBegin('deadLockMessage', TType.STRING, 8)
            oprot.writeString(self.deadLockMessage.encode('utf-8') if sys.version_info[0] == 2 else self.deadLockMessage)
            oprot.writeFieldEnd()
        if self.threadDetail is not None:
            oprot.writeFieldBegin('threadDetail', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.threadDetail))
            for iter69 in self.threadDetail:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.analysisid is not None:
            oprot.writeFieldBegin('analysisid', TType.I64, 10)
            oprot.writeI64(self.analysisid)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 11)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        if self.tenant is not None:
            oprot.writeFieldBegin('tenant', TType.STRING, 12)
            oprot.writeString(self.tenant.encode('utf-8') if sys.version_info[0] == 2 else self.tenant)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.appkey is None:
            raise TProtocolException(message='Required field appkey is unset!')
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.applicationName is None:
            raise TProtocolException(message='Required field applicationName is unset!')
        if self.agentId is None:
            raise TProtocolException(message='Required field agentId is unset!')
        if self.ts is None:
            raise TProtocolException(message='Required field ts is unset!')
        if self.isDeadLock is None:
            raise TProtocolException(message='Required field isDeadLock is unset!')
        if self.analysisid is None:
            raise TProtocolException(message='Required field analysisid is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.tenant is None:
            raise TProtocolException(message='Required field tenant is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAgentThreadChunk(object):
    """
    Attributes:
     - appkey
     - id
     - applicationName
     - agentId
     - ts
     - threadDetail
     - analysisid
     - appId
     - tenant

    """


    def __init__(self, appkey=None, id=None, applicationName=None, agentId=None, ts=None, threadDetail=None, analysisid=None, appId=None, tenant=None,):
        self.appkey = appkey
        self.id = id
        self.applicationName = applicationName
        self.agentId = agentId
        self.ts = ts
        self.threadDetail = threadDetail
        self.analysisid = analysisid
        self.appId = appId
        self.tenant = tenant

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.appkey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.applicationName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.ts = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.threadDetail = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = TAgentThreadDetail()
                        _elem75.read(iprot)
                        self.threadDetail.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.analysisid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.tenant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAgentThreadChunk')
        if self.appkey is not None:
            oprot.writeFieldBegin('appkey', TType.STRING, 1)
            oprot.writeString(self.appkey.encode('utf-8') if sys.version_info[0] == 2 else self.appkey)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 2)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.applicationName is not None:
            oprot.writeFieldBegin('applicationName', TType.STRING, 4)
            oprot.writeString(self.applicationName.encode('utf-8') if sys.version_info[0] == 2 else self.applicationName)
            oprot.writeFieldEnd()
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 5)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.ts is not None:
            oprot.writeFieldBegin('ts', TType.I64, 6)
            oprot.writeI64(self.ts)
            oprot.writeFieldEnd()
        if self.threadDetail is not None:
            oprot.writeFieldBegin('threadDetail', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.threadDetail))
            for iter76 in self.threadDetail:
                iter76.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.analysisid is not None:
            oprot.writeFieldBegin('analysisid', TType.I64, 10)
            oprot.writeI64(self.analysisid)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 11)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        if self.tenant is not None:
            oprot.writeFieldBegin('tenant', TType.STRING, 12)
            oprot.writeString(self.tenant.encode('utf-8') if sys.version_info[0] == 2 else self.tenant)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.appkey is None:
            raise TProtocolException(message='Required field appkey is unset!')
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.applicationName is None:
            raise TProtocolException(message='Required field applicationName is unset!')
        if self.agentId is None:
            raise TProtocolException(message='Required field agentId is unset!')
        if self.ts is None:
            raise TProtocolException(message='Required field ts is unset!')
        if self.analysisid is None:
            raise TProtocolException(message='Required field analysisid is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.tenant is None:
            raise TProtocolException(message='Required field tenant is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TDbMetaData(object):
    """
    Attributes:
     - agentId
     - appKey
     - dbUrl
     - dbHost
     - dbName
     - dbTypeCode

    """


    def __init__(self, agentId=None, appKey=None, dbUrl=None, dbHost=None, dbName=None, dbTypeCode=None,):
        self.agentId = agentId
        self.appKey = appKey
        self.dbUrl = dbUrl
        self.dbHost = dbHost
        self.dbName = dbName
        self.dbTypeCode = dbTypeCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.appKey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.dbUrl = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.dbHost = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.dbName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I16:
                    self.dbTypeCode = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TDbMetaData')
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 1)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.appKey is not None:
            oprot.writeFieldBegin('appKey', TType.STRING, 2)
            oprot.writeString(self.appKey.encode('utf-8') if sys.version_info[0] == 2 else self.appKey)
            oprot.writeFieldEnd()
        if self.dbUrl is not None:
            oprot.writeFieldBegin('dbUrl', TType.STRING, 4)
            oprot.writeString(self.dbUrl.encode('utf-8') if sys.version_info[0] == 2 else self.dbUrl)
            oprot.writeFieldEnd()
        if self.dbHost is not None:
            oprot.writeFieldBegin('dbHost', TType.STRING, 5)
            oprot.writeString(self.dbHost.encode('utf-8') if sys.version_info[0] == 2 else self.dbHost)
            oprot.writeFieldEnd()
        if self.dbName is not None:
            oprot.writeFieldBegin('dbName', TType.STRING, 6)
            oprot.writeString(self.dbName.encode('utf-8') if sys.version_info[0] == 2 else self.dbName)
            oprot.writeFieldEnd()
        if self.dbTypeCode is not None:
            oprot.writeFieldBegin('dbTypeCode', TType.I16, 8)
            oprot.writeI16(self.dbTypeCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.agentId is None:
            raise TProtocolException(message='Required field agentId is unset!')
        if self.appKey is None:
            raise TProtocolException(message='Required field appKey is unset!')
        if self.dbUrl is None:
            raise TProtocolException(message='Required field dbUrl is unset!')
        if self.dbHost is None:
            raise TProtocolException(message='Required field dbHost is unset!')
        if self.dbName is None:
            raise TProtocolException(message='Required field dbName is unset!')
        if self.dbTypeCode is None:
            raise TProtocolException(message='Required field dbTypeCode is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TIntStringValue(object):
    """
    Attributes:
     - intValue
     - stringValue

    """


    def __init__(self, intValue=None, stringValue=None,):
        self.intValue = intValue
        self.stringValue = stringValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.intValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TIntStringValue')
        if self.intValue is not None:
            oprot.writeFieldBegin('intValue', TType.I32, 1)
            oprot.writeI32(self.intValue)
            oprot.writeFieldEnd()
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 2)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.intValue is None:
            raise TProtocolException(message='Required field intValue is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TIntStringStringValue(object):
    """
    Attributes:
     - intValue
     - stringValue1
     - stringValue2

    """


    def __init__(self, intValue=None, stringValue1=None, stringValue2=None,):
        self.intValue = intValue
        self.stringValue1 = stringValue1
        self.stringValue2 = stringValue2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.intValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.stringValue1 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.stringValue2 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TIntStringStringValue')
        if self.intValue is not None:
            oprot.writeFieldBegin('intValue', TType.I32, 1)
            oprot.writeI32(self.intValue)
            oprot.writeFieldEnd()
        if self.stringValue1 is not None:
            oprot.writeFieldBegin('stringValue1', TType.STRING, 2)
            oprot.writeString(self.stringValue1.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue1)
            oprot.writeFieldEnd()
        if self.stringValue2 is not None:
            oprot.writeFieldBegin('stringValue2', TType.STRING, 3)
            oprot.writeString(self.stringValue2.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.intValue is None:
            raise TProtocolException(message='Required field intValue is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAnnotationValue(object):
    """
    Attributes:
     - stringValue
     - boolValue
     - intValue
     - longValue
     - shortValue
     - doubleValue
     - binaryValue
     - byteValue
     - intStringValue
     - intStringStringValue

    """


    def __init__(self, stringValue=None, boolValue=None, intValue=None, longValue=None, shortValue=None, doubleValue=None, binaryValue=None, byteValue=None, intStringValue=None, intStringStringValue=None,):
        self.stringValue = stringValue
        self.boolValue = boolValue
        self.intValue = intValue
        self.longValue = longValue
        self.shortValue = shortValue
        self.doubleValue = doubleValue
        self.binaryValue = binaryValue
        self.byteValue = byteValue
        self.intStringValue = intStringValue
        self.intStringStringValue = intStringStringValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.boolValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.intValue = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.longValue = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.shortValue = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.doubleValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.binaryValue = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BYTE:
                    self.byteValue = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.intStringValue = TIntStringValue()
                    self.intStringValue.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.intStringStringValue = TIntStringStringValue()
                    self.intStringStringValue.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAnnotationValue')
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 1)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        if self.boolValue is not None:
            oprot.writeFieldBegin('boolValue', TType.BOOL, 2)
            oprot.writeBool(self.boolValue)
            oprot.writeFieldEnd()
        if self.intValue is not None:
            oprot.writeFieldBegin('intValue', TType.I32, 3)
            oprot.writeI32(self.intValue)
            oprot.writeFieldEnd()
        if self.longValue is not None:
            oprot.writeFieldBegin('longValue', TType.I64, 4)
            oprot.writeI64(self.longValue)
            oprot.writeFieldEnd()
        if self.shortValue is not None:
            oprot.writeFieldBegin('shortValue', TType.I16, 5)
            oprot.writeI16(self.shortValue)
            oprot.writeFieldEnd()
        if self.doubleValue is not None:
            oprot.writeFieldBegin('doubleValue', TType.DOUBLE, 6)
            oprot.writeDouble(self.doubleValue)
            oprot.writeFieldEnd()
        if self.binaryValue is not None:
            oprot.writeFieldBegin('binaryValue', TType.STRING, 7)
            oprot.writeBinary(self.binaryValue)
            oprot.writeFieldEnd()
        if self.byteValue is not None:
            oprot.writeFieldBegin('byteValue', TType.BYTE, 8)
            oprot.writeByte(self.byteValue)
            oprot.writeFieldEnd()
        if self.intStringValue is not None:
            oprot.writeFieldBegin('intStringValue', TType.STRUCT, 9)
            self.intStringValue.write(oprot)
            oprot.writeFieldEnd()
        if self.intStringStringValue is not None:
            oprot.writeFieldBegin('intStringStringValue', TType.STRUCT, 10)
            self.intStringStringValue.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TAnnotation(object):
    """
    Attributes:
     - key
     - value

    """


    def __init__(self, key=None, value=None,):
        self.key = key
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.key = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.value = TAnnotationValue()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TAnnotation')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.I32, 1)
            oprot.writeI32(self.key)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 2)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.key is None:
            raise TProtocolException(message='Required field key is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSql(object):
    """
    Attributes:
     - dbhost
     - dbtype
     - db
     - sqlHash
     - outputs
     - bindValue
     - status
     - err
     - startTime
     - dur

    """


    def __init__(self, dbhost=None, dbtype=None, db=None, sqlHash=None, outputs=None, bindValue=None, status=None, err=None, startTime=None, dur=None,):
        self.dbhost = dbhost
        self.dbtype = dbtype
        self.db = db
        self.sqlHash = sqlHash
        self.outputs = outputs
        self.bindValue = bindValue
        self.status = status
        self.err = err
        self.startTime = startTime
        self.dur = dur

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.dbhost = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dbtype = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.db = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.sqlHash = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.outputs = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.bindValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.err = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.dur = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSql')
        if self.dbhost is not None:
            oprot.writeFieldBegin('dbhost', TType.STRING, 1)
            oprot.writeString(self.dbhost.encode('utf-8') if sys.version_info[0] == 2 else self.dbhost)
            oprot.writeFieldEnd()
        if self.dbtype is not None:
            oprot.writeFieldBegin('dbtype', TType.STRING, 2)
            oprot.writeString(self.dbtype.encode('utf-8') if sys.version_info[0] == 2 else self.dbtype)
            oprot.writeFieldEnd()
        if self.db is not None:
            oprot.writeFieldBegin('db', TType.STRING, 3)
            oprot.writeString(self.db.encode('utf-8') if sys.version_info[0] == 2 else self.db)
            oprot.writeFieldEnd()
        if self.sqlHash is not None:
            oprot.writeFieldBegin('sqlHash', TType.STRING, 6)
            oprot.writeString(self.sqlHash.encode('utf-8') if sys.version_info[0] == 2 else self.sqlHash)
            oprot.writeFieldEnd()
        if self.outputs is not None:
            oprot.writeFieldBegin('outputs', TType.STRING, 7)
            oprot.writeString(self.outputs.encode('utf-8') if sys.version_info[0] == 2 else self.outputs)
            oprot.writeFieldEnd()
        if self.bindValue is not None:
            oprot.writeFieldBegin('bindValue', TType.STRING, 8)
            oprot.writeString(self.bindValue.encode('utf-8') if sys.version_info[0] == 2 else self.bindValue)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 10)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRING, 11)
            oprot.writeString(self.err.encode('utf-8') if sys.version_info[0] == 2 else self.err)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 12)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.dur is not None:
            oprot.writeFieldBegin('dur', TType.I64, 13)
            oprot.writeI64(self.dur)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.dbhost is None:
            raise TProtocolException(message='Required field dbhost is unset!')
        if self.dbtype is None:
            raise TProtocolException(message='Required field dbtype is unset!')
        if self.db is None:
            raise TProtocolException(message='Required field db is unset!')
        if self.sqlHash is None:
            raise TProtocolException(message='Required field sqlHash is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.startTime is None:
            raise TProtocolException(message='Required field startTime is unset!')
        if self.dur is None:
            raise TProtocolException(message='Required field dur is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSpanEvent(object):
    """
    Attributes:
     - spanId
     - sequence
     - startElapsed
     - endElapsed
     - rpc
     - serviceType
     - endPoint
     - annotations
     - depth
     - nextSpanId
     - destinationId
     - apiId
     - exceptionInfo
     - exceptionClassName
     - asyncId
     - nextAsyncId
     - asyncSequence
     - apiInfo
     - lineNumber
     - sql
     - retcode
     - requestHeaders
     - requestBody
     - responseBody
     - url
     - method
     - arguments

    """


    def __init__(self, spanId=None, sequence=None, startElapsed=None, endElapsed=0, rpc=None, serviceType=None, endPoint=None, annotations=None, depth=-1, nextSpanId=-1, destinationId=None, apiId=None, exceptionInfo=None, exceptionClassName=None, asyncId=None, nextAsyncId=None, asyncSequence=None, apiInfo=None, lineNumber=None, sql=None, retcode=None, requestHeaders=None, requestBody=None, responseBody=None, url=None, method=None, arguments=None,):
        self.spanId = spanId
        self.sequence = sequence
        self.startElapsed = startElapsed
        self.endElapsed = endElapsed
        self.rpc = rpc
        self.serviceType = serviceType
        self.endPoint = endPoint
        self.annotations = annotations
        self.depth = depth
        self.nextSpanId = nextSpanId
        self.destinationId = destinationId
        self.apiId = apiId
        self.exceptionInfo = exceptionInfo
        self.exceptionClassName = exceptionClassName
        self.asyncId = asyncId
        self.nextAsyncId = nextAsyncId
        self.asyncSequence = asyncSequence
        self.apiInfo = apiInfo
        self.lineNumber = lineNumber
        self.sql = sql
        self.retcode = retcode
        self.requestHeaders = requestHeaders
        self.requestBody = requestBody
        self.responseBody = responseBody
        self.url = url
        self.method = method
        self.arguments = arguments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 7:
                if ftype == TType.I64:
                    self.spanId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.sequence = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.startElapsed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.endElapsed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.rpc = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I16:
                    self.serviceType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.endPoint = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.annotations = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = TAnnotation()
                        _elem82.read(iprot)
                        self.annotations.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.depth = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.nextSpanId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.destinationId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.apiId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRUCT:
                    self.exceptionInfo = TIntStringValue()
                    self.exceptionInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.exceptionClassName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.I32:
                    self.asyncId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I32:
                    self.nextAsyncId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.I32:
                    self.asyncSequence = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.apiInfo = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.I32:
                    self.lineNumber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRUCT:
                    self.sql = TSql()
                    self.sql.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.I32:
                    self.retcode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRING:
                    self.requestHeaders = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.STRING:
                    self.requestBody = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 71:
                if ftype == TType.STRING:
                    self.responseBody = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 81:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 91:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 92:
                if ftype == TType.STRING:
                    self.arguments = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSpanEvent')
        if self.spanId is not None:
            oprot.writeFieldBegin('spanId', TType.I64, 7)
            oprot.writeI64(self.spanId)
            oprot.writeFieldEnd()
        if self.sequence is not None:
            oprot.writeFieldBegin('sequence', TType.I32, 8)
            oprot.writeI32(self.sequence)
            oprot.writeFieldEnd()
        if self.startElapsed is not None:
            oprot.writeFieldBegin('startElapsed', TType.I32, 9)
            oprot.writeI32(self.startElapsed)
            oprot.writeFieldEnd()
        if self.endElapsed is not None:
            oprot.writeFieldBegin('endElapsed', TType.I32, 10)
            oprot.writeI32(self.endElapsed)
            oprot.writeFieldEnd()
        if self.rpc is not None:
            oprot.writeFieldBegin('rpc', TType.STRING, 11)
            oprot.writeString(self.rpc.encode('utf-8') if sys.version_info[0] == 2 else self.rpc)
            oprot.writeFieldEnd()
        if self.serviceType is not None:
            oprot.writeFieldBegin('serviceType', TType.I16, 12)
            oprot.writeI16(self.serviceType)
            oprot.writeFieldEnd()
        if self.endPoint is not None:
            oprot.writeFieldBegin('endPoint', TType.STRING, 13)
            oprot.writeString(self.endPoint.encode('utf-8') if sys.version_info[0] == 2 else self.endPoint)
            oprot.writeFieldEnd()
        if self.annotations is not None:
            oprot.writeFieldBegin('annotations', TType.LIST, 14)
            oprot.writeListBegin(TType.STRUCT, len(self.annotations))
            for iter83 in self.annotations:
                iter83.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.depth is not None:
            oprot.writeFieldBegin('depth', TType.I32, 15)
            oprot.writeI32(self.depth)
            oprot.writeFieldEnd()
        if self.nextSpanId is not None:
            oprot.writeFieldBegin('nextSpanId', TType.I64, 16)
            oprot.writeI64(self.nextSpanId)
            oprot.writeFieldEnd()
        if self.destinationId is not None:
            oprot.writeFieldBegin('destinationId', TType.STRING, 20)
            oprot.writeString(self.destinationId.encode('utf-8') if sys.version_info[0] == 2 else self.destinationId)
            oprot.writeFieldEnd()
        if self.apiId is not None:
            oprot.writeFieldBegin('apiId', TType.I32, 25)
            oprot.writeI32(self.apiId)
            oprot.writeFieldEnd()
        if self.exceptionInfo is not None:
            oprot.writeFieldBegin('exceptionInfo', TType.STRUCT, 26)
            self.exceptionInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.exceptionClassName is not None:
            oprot.writeFieldBegin('exceptionClassName', TType.STRING, 27)
            oprot.writeString(self.exceptionClassName.encode('utf-8') if sys.version_info[0] == 2 else self.exceptionClassName)
            oprot.writeFieldEnd()
        if self.asyncId is not None:
            oprot.writeFieldBegin('asyncId', TType.I32, 30)
            oprot.writeI32(self.asyncId)
            oprot.writeFieldEnd()
        if self.nextAsyncId is not None:
            oprot.writeFieldBegin('nextAsyncId', TType.I32, 31)
            oprot.writeI32(self.nextAsyncId)
            oprot.writeFieldEnd()
        if self.asyncSequence is not None:
            oprot.writeFieldBegin('asyncSequence', TType.I32, 32)
            oprot.writeI32(self.asyncSequence)
            oprot.writeFieldEnd()
        if self.apiInfo is not None:
            oprot.writeFieldBegin('apiInfo', TType.STRING, 33)
            oprot.writeString(self.apiInfo.encode('utf-8') if sys.version_info[0] == 2 else self.apiInfo)
            oprot.writeFieldEnd()
        if self.lineNumber is not None:
            oprot.writeFieldBegin('lineNumber', TType.I32, 34)
            oprot.writeI32(self.lineNumber)
            oprot.writeFieldEnd()
        if self.sql is not None:
            oprot.writeFieldBegin('sql', TType.STRUCT, 40)
            self.sql.write(oprot)
            oprot.writeFieldEnd()
        if self.retcode is not None:
            oprot.writeFieldBegin('retcode', TType.I32, 41)
            oprot.writeI32(self.retcode)
            oprot.writeFieldEnd()
        if self.requestHeaders is not None:
            oprot.writeFieldBegin('requestHeaders', TType.STRING, 51)
            oprot.writeString(self.requestHeaders.encode('utf-8') if sys.version_info[0] == 2 else self.requestHeaders)
            oprot.writeFieldEnd()
        if self.requestBody is not None:
            oprot.writeFieldBegin('requestBody', TType.STRING, 61)
            oprot.writeString(self.requestBody.encode('utf-8') if sys.version_info[0] == 2 else self.requestBody)
            oprot.writeFieldEnd()
        if self.responseBody is not None:
            oprot.writeFieldBegin('responseBody', TType.STRING, 71)
            oprot.writeString(self.responseBody.encode('utf-8') if sys.version_info[0] == 2 else self.responseBody)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 81)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 91)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.STRING, 92)
            oprot.writeString(self.arguments.encode('utf-8') if sys.version_info[0] == 2 else self.arguments)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sequence is None:
            raise TProtocolException(message='Required field sequence is unset!')
        if self.startElapsed is None:
            raise TProtocolException(message='Required field startElapsed is unset!')
        if self.serviceType is None:
            raise TProtocolException(message='Required field serviceType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TExceptionMetaData2Api(object):
    """
    Attributes:
     - ts
     - name
     - msg
     - method
     - exceptionClass
     - apiName
     - url
     - tier
     - agent_id
     - app_key
     - tenant
     - appId
     - transactionId
     - spanId
     - pspanId
     - pagentId
     - exceptionId
     - userId
     - sessionId
     - agentStartTime
     - ip

    """


    def __init__(self, ts=None, name=None, msg=None, method=None, exceptionClass=None, apiName=None, url=None, tier=None, agent_id=None, app_key=None, tenant=None, appId=None, transactionId=None, spanId=None, pspanId=None, pagentId=None, exceptionId=None, userId=None, sessionId=None, agentStartTime=None, ip=None,):
        self.ts = ts
        self.name = name
        self.msg = msg
        self.method = method
        self.exceptionClass = exceptionClass
        self.apiName = apiName
        self.url = url
        self.tier = tier
        self.agent_id = agent_id
        self.app_key = app_key
        self.tenant = tenant
        self.appId = appId
        self.transactionId = transactionId
        self.spanId = spanId
        self.pspanId = pspanId
        self.pagentId = pagentId
        self.exceptionId = exceptionId
        self.userId = userId
        self.sessionId = sessionId
        self.agentStartTime = agentStartTime
        self.ip = ip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ts = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.exceptionClass = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.apiName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.tier = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.agent_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.app_key = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.tenant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.transactionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.spanId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.pspanId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.pagentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.exceptionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.sessionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I64:
                    self.agentStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TExceptionMetaData2Api')
        if self.ts is not None:
            oprot.writeFieldBegin('ts', TType.I64, 1)
            oprot.writeI64(self.ts)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 3)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 4)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.exceptionClass is not None:
            oprot.writeFieldBegin('exceptionClass', TType.STRING, 5)
            oprot.writeString(self.exceptionClass.encode('utf-8') if sys.version_info[0] == 2 else self.exceptionClass)
            oprot.writeFieldEnd()
        if self.apiName is not None:
            oprot.writeFieldBegin('apiName', TType.STRING, 6)
            oprot.writeString(self.apiName.encode('utf-8') if sys.version_info[0] == 2 else self.apiName)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 7)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.tier is not None:
            oprot.writeFieldBegin('tier', TType.STRING, 8)
            oprot.writeString(self.tier.encode('utf-8') if sys.version_info[0] == 2 else self.tier)
            oprot.writeFieldEnd()
        if self.agent_id is not None:
            oprot.writeFieldBegin('agent_id', TType.STRING, 9)
            oprot.writeString(self.agent_id.encode('utf-8') if sys.version_info[0] == 2 else self.agent_id)
            oprot.writeFieldEnd()
        if self.app_key is not None:
            oprot.writeFieldBegin('app_key', TType.STRING, 10)
            oprot.writeString(self.app_key.encode('utf-8') if sys.version_info[0] == 2 else self.app_key)
            oprot.writeFieldEnd()
        if self.tenant is not None:
            oprot.writeFieldBegin('tenant', TType.STRING, 11)
            oprot.writeString(self.tenant.encode('utf-8') if sys.version_info[0] == 2 else self.tenant)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 12)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        if self.transactionId is not None:
            oprot.writeFieldBegin('transactionId', TType.STRING, 14)
            oprot.writeString(self.transactionId.encode('utf-8') if sys.version_info[0] == 2 else self.transactionId)
            oprot.writeFieldEnd()
        if self.spanId is not None:
            oprot.writeFieldBegin('spanId', TType.STRING, 15)
            oprot.writeString(self.spanId.encode('utf-8') if sys.version_info[0] == 2 else self.spanId)
            oprot.writeFieldEnd()
        if self.pspanId is not None:
            oprot.writeFieldBegin('pspanId', TType.STRING, 16)
            oprot.writeString(self.pspanId.encode('utf-8') if sys.version_info[0] == 2 else self.pspanId)
            oprot.writeFieldEnd()
        if self.pagentId is not None:
            oprot.writeFieldBegin('pagentId', TType.STRING, 17)
            oprot.writeString(self.pagentId.encode('utf-8') if sys.version_info[0] == 2 else self.pagentId)
            oprot.writeFieldEnd()
        if self.exceptionId is not None:
            oprot.writeFieldBegin('exceptionId', TType.I32, 18)
            oprot.writeI32(self.exceptionId)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 19)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRING, 20)
            oprot.writeString(self.sessionId.encode('utf-8') if sys.version_info[0] == 2 else self.sessionId)
            oprot.writeFieldEnd()
        if self.agentStartTime is not None:
            oprot.writeFieldBegin('agentStartTime', TType.I64, 21)
            oprot.writeI64(self.agentStartTime)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 22)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ts is None:
            raise TProtocolException(message='Required field ts is unset!')
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.msg is None:
            raise TProtocolException(message='Required field msg is unset!')
        if self.method is None:
            raise TProtocolException(message='Required field method is unset!')
        if self.exceptionClass is None:
            raise TProtocolException(message='Required field exceptionClass is unset!')
        if self.apiName is None:
            raise TProtocolException(message='Required field apiName is unset!')
        if self.url is None:
            raise TProtocolException(message='Required field url is unset!')
        if self.tier is None:
            raise TProtocolException(message='Required field tier is unset!')
        if self.agent_id is None:
            raise TProtocolException(message='Required field agent_id is unset!')
        if self.app_key is None:
            raise TProtocolException(message='Required field app_key is unset!')
        if self.tenant is None:
            raise TProtocolException(message='Required field tenant is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.transactionId is None:
            raise TProtocolException(message='Required field transactionId is unset!')
        if self.spanId is None:
            raise TProtocolException(message='Required field spanId is unset!')
        if self.pspanId is None:
            raise TProtocolException(message='Required field pspanId is unset!')
        if self.agentStartTime is None:
            raise TProtocolException(message='Required field agentStartTime is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSpan(object):
    """
    Attributes:
     - agentId
     - applicationName
     - agentStartTime
     - transactionId
     - appkey
     - spanId
     - parentSpanId
     - startTime
     - elapsed
     - rpc
     - serviceType
     - endPoint
     - remoteAddr
     - annotations
     - flag
     - err
     - spanEventList
     - parentApplicationName
     - parentApplicationType
     - acceptorHost
     - apiId
     - exceptionInfo
     - applicationServiceType
     - loggingTransactionInfo
     - httpPara
     - httpMethod
     - httpRequestHeader
     - httpRequestUserAgent
     - httpRequestBody
     - httpResponseBody
     - retcode
     - httpRequestUID
     - httpRequestTID
     - pagentId
     - apidesc
     - httpResponseHeader
     - userId
     - sessionId
     - appId
     - tenant
     - threadId
     - threadName
     - hasNextCall

    """


    def __init__(self, agentId=None, applicationName=None, agentStartTime=None, transactionId=None, appkey=None, spanId=None, parentSpanId=-1, startTime=None, elapsed=0, rpc=None, serviceType=None, endPoint=None, remoteAddr=None, annotations=None, flag=0, err=None, spanEventList=None, parentApplicationName=None, parentApplicationType=None, acceptorHost=None, apiId=None, exceptionInfo=None, applicationServiceType=None, loggingTransactionInfo=None, httpPara=None, httpMethod=None, httpRequestHeader=None, httpRequestUserAgent=None, httpRequestBody=None, httpResponseBody=None, retcode=None, httpRequestUID=None, httpRequestTID=None, pagentId=None, apidesc=None, httpResponseHeader=None, userId=None, sessionId=None, appId=None, tenant=None, threadId=None, threadName=None, hasNextCall=None,):
        self.agentId = agentId
        self.applicationName = applicationName
        self.agentStartTime = agentStartTime
        self.transactionId = transactionId
        self.appkey = appkey
        self.spanId = spanId
        self.parentSpanId = parentSpanId
        self.startTime = startTime
        self.elapsed = elapsed
        self.rpc = rpc
        self.serviceType = serviceType
        self.endPoint = endPoint
        self.remoteAddr = remoteAddr
        self.annotations = annotations
        self.flag = flag
        self.err = err
        self.spanEventList = spanEventList
        self.parentApplicationName = parentApplicationName
        self.parentApplicationType = parentApplicationType
        self.acceptorHost = acceptorHost
        self.apiId = apiId
        self.exceptionInfo = exceptionInfo
        self.applicationServiceType = applicationServiceType
        self.loggingTransactionInfo = loggingTransactionInfo
        self.httpPara = httpPara
        self.httpMethod = httpMethod
        self.httpRequestHeader = httpRequestHeader
        self.httpRequestUserAgent = httpRequestUserAgent
        self.httpRequestBody = httpRequestBody
        self.httpResponseBody = httpResponseBody
        self.retcode = retcode
        self.httpRequestUID = httpRequestUID
        self.httpRequestTID = httpRequestTID
        self.pagentId = pagentId
        self.apidesc = apidesc
        self.httpResponseHeader = httpResponseHeader
        self.userId = userId
        self.sessionId = sessionId
        self.appId = appId
        self.tenant = tenant
        self.threadId = threadId
        self.threadName = threadName
        self.hasNextCall = hasNextCall

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.applicationName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.agentStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.transactionId = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.appkey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.spanId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.parentSpanId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.elapsed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.rpc = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I16:
                    self.serviceType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.endPoint = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.remoteAddr = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.annotations = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = TAnnotation()
                        _elem89.read(iprot)
                        self.annotations.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I16:
                    self.flag = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.err = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.LIST:
                    self.spanEventList = []
                    (_etype93, _size90) = iprot.readListBegin()
                    for _i94 in range(_size90):
                        _elem95 = TSpanEvent()
                        _elem95.read(iprot)
                        self.spanEventList.append(_elem95)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.parentApplicationName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I16:
                    self.parentApplicationType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.acceptorHost = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.apiId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRUCT:
                    self.exceptionInfo = TIntStringValue()
                    self.exceptionInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.I16:
                    self.applicationServiceType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BYTE:
                    self.loggingTransactionInfo = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.httpPara = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.httpMethod = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRING:
                    self.httpRequestHeader = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.httpRequestUserAgent = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.STRING:
                    self.httpRequestBody = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.STRING:
                    self.httpResponseBody = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.I16:
                    self.retcode = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.STRING:
                    self.httpRequestUID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRING:
                    self.httpRequestTID = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRING:
                    self.pagentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.STRING:
                    self.apidesc = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.STRING:
                    self.httpResponseHeader = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.STRING:
                    self.sessionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.STRING:
                    self.tenant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.I64:
                    self.threadId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 51:
                if ftype == TType.STRING:
                    self.threadName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 52:
                if ftype == TType.BOOL:
                    self.hasNextCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSpan')
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 1)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.applicationName is not None:
            oprot.writeFieldBegin('applicationName', TType.STRING, 2)
            oprot.writeString(self.applicationName.encode('utf-8') if sys.version_info[0] == 2 else self.applicationName)
            oprot.writeFieldEnd()
        if self.agentStartTime is not None:
            oprot.writeFieldBegin('agentStartTime', TType.I64, 3)
            oprot.writeI64(self.agentStartTime)
            oprot.writeFieldEnd()
        if self.transactionId is not None:
            oprot.writeFieldBegin('transactionId', TType.STRING, 4)
            oprot.writeBinary(self.transactionId)
            oprot.writeFieldEnd()
        if self.appkey is not None:
            oprot.writeFieldBegin('appkey', TType.STRING, 5)
            oprot.writeString(self.appkey.encode('utf-8') if sys.version_info[0] == 2 else self.appkey)
            oprot.writeFieldEnd()
        if self.spanId is not None:
            oprot.writeFieldBegin('spanId', TType.I64, 7)
            oprot.writeI64(self.spanId)
            oprot.writeFieldEnd()
        if self.parentSpanId is not None:
            oprot.writeFieldBegin('parentSpanId', TType.I64, 8)
            oprot.writeI64(self.parentSpanId)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 9)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.elapsed is not None:
            oprot.writeFieldBegin('elapsed', TType.I32, 10)
            oprot.writeI32(self.elapsed)
            oprot.writeFieldEnd()
        if self.rpc is not None:
            oprot.writeFieldBegin('rpc', TType.STRING, 11)
            oprot.writeString(self.rpc.encode('utf-8') if sys.version_info[0] == 2 else self.rpc)
            oprot.writeFieldEnd()
        if self.serviceType is not None:
            oprot.writeFieldBegin('serviceType', TType.I16, 12)
            oprot.writeI16(self.serviceType)
            oprot.writeFieldEnd()
        if self.endPoint is not None:
            oprot.writeFieldBegin('endPoint', TType.STRING, 13)
            oprot.writeString(self.endPoint.encode('utf-8') if sys.version_info[0] == 2 else self.endPoint)
            oprot.writeFieldEnd()
        if self.remoteAddr is not None:
            oprot.writeFieldBegin('remoteAddr', TType.STRING, 14)
            oprot.writeString(self.remoteAddr.encode('utf-8') if sys.version_info[0] == 2 else self.remoteAddr)
            oprot.writeFieldEnd()
        if self.annotations is not None:
            oprot.writeFieldBegin('annotations', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.annotations))
            for iter96 in self.annotations:
                iter96.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.flag is not None:
            oprot.writeFieldBegin('flag', TType.I16, 16)
            oprot.writeI16(self.flag)
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.I32, 17)
            oprot.writeI32(self.err)
            oprot.writeFieldEnd()
        if self.spanEventList is not None:
            oprot.writeFieldBegin('spanEventList', TType.LIST, 18)
            oprot.writeListBegin(TType.STRUCT, len(self.spanEventList))
            for iter97 in self.spanEventList:
                iter97.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.parentApplicationName is not None:
            oprot.writeFieldBegin('parentApplicationName', TType.STRING, 19)
            oprot.writeString(self.parentApplicationName.encode('utf-8') if sys.version_info[0] == 2 else self.parentApplicationName)
            oprot.writeFieldEnd()
        if self.parentApplicationType is not None:
            oprot.writeFieldBegin('parentApplicationType', TType.I16, 20)
            oprot.writeI16(self.parentApplicationType)
            oprot.writeFieldEnd()
        if self.acceptorHost is not None:
            oprot.writeFieldBegin('acceptorHost', TType.STRING, 21)
            oprot.writeString(self.acceptorHost.encode('utf-8') if sys.version_info[0] == 2 else self.acceptorHost)
            oprot.writeFieldEnd()
        if self.apiId is not None:
            oprot.writeFieldBegin('apiId', TType.I32, 25)
            oprot.writeI32(self.apiId)
            oprot.writeFieldEnd()
        if self.exceptionInfo is not None:
            oprot.writeFieldBegin('exceptionInfo', TType.STRUCT, 26)
            self.exceptionInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.applicationServiceType is not None:
            oprot.writeFieldBegin('applicationServiceType', TType.I16, 30)
            oprot.writeI16(self.applicationServiceType)
            oprot.writeFieldEnd()
        if self.loggingTransactionInfo is not None:
            oprot.writeFieldBegin('loggingTransactionInfo', TType.BYTE, 31)
            oprot.writeByte(self.loggingTransactionInfo)
            oprot.writeFieldEnd()
        if self.httpPara is not None:
            oprot.writeFieldBegin('httpPara', TType.STRING, 32)
            oprot.writeString(self.httpPara.encode('utf-8') if sys.version_info[0] == 2 else self.httpPara)
            oprot.writeFieldEnd()
        if self.httpMethod is not None:
            oprot.writeFieldBegin('httpMethod', TType.STRING, 33)
            oprot.writeString(self.httpMethod.encode('utf-8') if sys.version_info[0] == 2 else self.httpMethod)
            oprot.writeFieldEnd()
        if self.httpRequestHeader is not None:
            oprot.writeFieldBegin('httpRequestHeader', TType.STRING, 34)
            oprot.writeString(self.httpRequestHeader.encode('utf-8') if sys.version_info[0] == 2 else self.httpRequestHeader)
            oprot.writeFieldEnd()
        if self.httpRequestUserAgent is not None:
            oprot.writeFieldBegin('httpRequestUserAgent', TType.STRING, 35)
            oprot.writeString(self.httpRequestUserAgent.encode('utf-8') if sys.version_info[0] == 2 else self.httpRequestUserAgent)
            oprot.writeFieldEnd()
        if self.httpRequestBody is not None:
            oprot.writeFieldBegin('httpRequestBody', TType.STRING, 36)
            oprot.writeString(self.httpRequestBody.encode('utf-8') if sys.version_info[0] == 2 else self.httpRequestBody)
            oprot.writeFieldEnd()
        if self.httpResponseBody is not None:
            oprot.writeFieldBegin('httpResponseBody', TType.STRING, 37)
            oprot.writeString(self.httpResponseBody.encode('utf-8') if sys.version_info[0] == 2 else self.httpResponseBody)
            oprot.writeFieldEnd()
        if self.retcode is not None:
            oprot.writeFieldBegin('retcode', TType.I16, 38)
            oprot.writeI16(self.retcode)
            oprot.writeFieldEnd()
        if self.httpRequestUID is not None:
            oprot.writeFieldBegin('httpRequestUID', TType.STRING, 39)
            oprot.writeString(self.httpRequestUID.encode('utf-8') if sys.version_info[0] == 2 else self.httpRequestUID)
            oprot.writeFieldEnd()
        if self.httpRequestTID is not None:
            oprot.writeFieldBegin('httpRequestTID', TType.STRING, 40)
            oprot.writeString(self.httpRequestTID.encode('utf-8') if sys.version_info[0] == 2 else self.httpRequestTID)
            oprot.writeFieldEnd()
        if self.pagentId is not None:
            oprot.writeFieldBegin('pagentId', TType.STRING, 41)
            oprot.writeString(self.pagentId.encode('utf-8') if sys.version_info[0] == 2 else self.pagentId)
            oprot.writeFieldEnd()
        if self.apidesc is not None:
            oprot.writeFieldBegin('apidesc', TType.STRING, 42)
            oprot.writeString(self.apidesc.encode('utf-8') if sys.version_info[0] == 2 else self.apidesc)
            oprot.writeFieldEnd()
        if self.httpResponseHeader is not None:
            oprot.writeFieldBegin('httpResponseHeader', TType.STRING, 43)
            oprot.writeString(self.httpResponseHeader.encode('utf-8') if sys.version_info[0] == 2 else self.httpResponseHeader)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 44)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRING, 45)
            oprot.writeString(self.sessionId.encode('utf-8') if sys.version_info[0] == 2 else self.sessionId)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 46)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        if self.tenant is not None:
            oprot.writeFieldBegin('tenant', TType.STRING, 47)
            oprot.writeString(self.tenant.encode('utf-8') if sys.version_info[0] == 2 else self.tenant)
            oprot.writeFieldEnd()
        if self.threadId is not None:
            oprot.writeFieldBegin('threadId', TType.I64, 50)
            oprot.writeI64(self.threadId)
            oprot.writeFieldEnd()
        if self.threadName is not None:
            oprot.writeFieldBegin('threadName', TType.STRING, 51)
            oprot.writeString(self.threadName.encode('utf-8') if sys.version_info[0] == 2 else self.threadName)
            oprot.writeFieldEnd()
        if self.hasNextCall is not None:
            oprot.writeFieldBegin('hasNextCall', TType.BOOL, 52)
            oprot.writeBool(self.hasNextCall)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.agentId is None:
            raise TProtocolException(message='Required field agentId is unset!')
        if self.applicationName is None:
            raise TProtocolException(message='Required field applicationName is unset!')
        if self.agentStartTime is None:
            raise TProtocolException(message='Required field agentStartTime is unset!')
        if self.transactionId is None:
            raise TProtocolException(message='Required field transactionId is unset!')
        if self.appkey is None:
            raise TProtocolException(message='Required field appkey is unset!')
        if self.spanId is None:
            raise TProtocolException(message='Required field spanId is unset!')
        if self.startTime is None:
            raise TProtocolException(message='Required field startTime is unset!')
        if self.serviceType is None:
            raise TProtocolException(message='Required field serviceType is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.tenant is None:
            raise TProtocolException(message='Required field tenant is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSpanChunk(object):
    """
    Attributes:
     - agentId
     - applicationName
     - agentStartTime
     - serviceType
     - transactionId
     - appkey
     - spanId
     - endPoint
     - spanEventList
     - applicationServiceType
     - appId
     - tenant
     - threadId
     - threadName
     - userId
     - sessionId
     - startTime

    """


    def __init__(self, agentId=None, applicationName=None, agentStartTime=None, serviceType=None, transactionId=None, appkey=None, spanId=None, endPoint=None, spanEventList=None, applicationServiceType=None, appId=None, tenant=None, threadId=None, threadName=None, userId=None, sessionId=None, startTime=None,):
        self.agentId = agentId
        self.applicationName = applicationName
        self.agentStartTime = agentStartTime
        self.serviceType = serviceType
        self.transactionId = transactionId
        self.appkey = appkey
        self.spanId = spanId
        self.endPoint = endPoint
        self.spanEventList = spanEventList
        self.applicationServiceType = applicationServiceType
        self.appId = appId
        self.tenant = tenant
        self.threadId = threadId
        self.threadName = threadName
        self.userId = userId
        self.sessionId = sessionId
        self.startTime = startTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.applicationName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.agentStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.serviceType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.transactionId = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.appkey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.spanId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.endPoint = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.spanEventList = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = TSpanEvent()
                        _elem103.read(iprot)
                        self.spanEventList.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I16:
                    self.applicationServiceType = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.tenant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.threadId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.threadName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.sessionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSpanChunk')
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 1)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.applicationName is not None:
            oprot.writeFieldBegin('applicationName', TType.STRING, 2)
            oprot.writeString(self.applicationName.encode('utf-8') if sys.version_info[0] == 2 else self.applicationName)
            oprot.writeFieldEnd()
        if self.agentStartTime is not None:
            oprot.writeFieldBegin('agentStartTime', TType.I64, 3)
            oprot.writeI64(self.agentStartTime)
            oprot.writeFieldEnd()
        if self.serviceType is not None:
            oprot.writeFieldBegin('serviceType', TType.I16, 4)
            oprot.writeI16(self.serviceType)
            oprot.writeFieldEnd()
        if self.transactionId is not None:
            oprot.writeFieldBegin('transactionId', TType.STRING, 5)
            oprot.writeBinary(self.transactionId)
            oprot.writeFieldEnd()
        if self.appkey is not None:
            oprot.writeFieldBegin('appkey', TType.STRING, 6)
            oprot.writeString(self.appkey.encode('utf-8') if sys.version_info[0] == 2 else self.appkey)
            oprot.writeFieldEnd()
        if self.spanId is not None:
            oprot.writeFieldBegin('spanId', TType.I64, 8)
            oprot.writeI64(self.spanId)
            oprot.writeFieldEnd()
        if self.endPoint is not None:
            oprot.writeFieldBegin('endPoint', TType.STRING, 9)
            oprot.writeString(self.endPoint.encode('utf-8') if sys.version_info[0] == 2 else self.endPoint)
            oprot.writeFieldEnd()
        if self.spanEventList is not None:
            oprot.writeFieldBegin('spanEventList', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.spanEventList))
            for iter104 in self.spanEventList:
                iter104.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.applicationServiceType is not None:
            oprot.writeFieldBegin('applicationServiceType', TType.I16, 11)
            oprot.writeI16(self.applicationServiceType)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 12)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        if self.tenant is not None:
            oprot.writeFieldBegin('tenant', TType.STRING, 13)
            oprot.writeString(self.tenant.encode('utf-8') if sys.version_info[0] == 2 else self.tenant)
            oprot.writeFieldEnd()
        if self.threadId is not None:
            oprot.writeFieldBegin('threadId', TType.I64, 15)
            oprot.writeI64(self.threadId)
            oprot.writeFieldEnd()
        if self.threadName is not None:
            oprot.writeFieldBegin('threadName', TType.STRING, 16)
            oprot.writeString(self.threadName.encode('utf-8') if sys.version_info[0] == 2 else self.threadName)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 17)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRING, 18)
            oprot.writeString(self.sessionId.encode('utf-8') if sys.version_info[0] == 2 else self.sessionId)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 19)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.agentId is None:
            raise TProtocolException(message='Required field agentId is unset!')
        if self.applicationName is None:
            raise TProtocolException(message='Required field applicationName is unset!')
        if self.agentStartTime is None:
            raise TProtocolException(message='Required field agentStartTime is unset!')
        if self.serviceType is None:
            raise TProtocolException(message='Required field serviceType is unset!')
        if self.transactionId is None:
            raise TProtocolException(message='Required field transactionId is unset!')
        if self.appkey is None:
            raise TProtocolException(message='Required field appkey is unset!')
        if self.spanId is None:
            raise TProtocolException(message='Required field spanId is unset!')
        if self.spanEventList is None:
            raise TProtocolException(message='Required field spanEventList is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.tenant is None:
            raise TProtocolException(message='Required field tenant is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TServiceType(object):
    """
    Attributes:
     - name
     - code
     - desc
     - isInternalMethod
     - isRpcClient
     - isRecordStatistics
     - isUnknown
     - isUser
     - isTerminal
     - isQueue
     - isIncludeDestinationId

    """


    def __init__(self, name=None, code=None, desc=None, isInternalMethod=None, isRpcClient=None, isRecordStatistics=None, isUnknown=None, isUser=None, isTerminal=None, isQueue=None, isIncludeDestinationId=None,):
        self.name = name
        self.code = code
        self.desc = desc
        self.isInternalMethod = isInternalMethod
        self.isRpcClient = isRpcClient
        self.isRecordStatistics = isRecordStatistics
        self.isUnknown = isUnknown
        self.isUser = isUser
        self.isTerminal = isTerminal
        self.isQueue = isQueue
        self.isIncludeDestinationId = isIncludeDestinationId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.code = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.isInternalMethod = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.isRpcClient = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.isRecordStatistics = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.isUnknown = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.isUser = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.isTerminal = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.isQueue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.isIncludeDestinationId = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TServiceType')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I16, 2)
            oprot.writeI16(self.code)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 3)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        if self.isInternalMethod is not None:
            oprot.writeFieldBegin('isInternalMethod', TType.BOOL, 4)
            oprot.writeBool(self.isInternalMethod)
            oprot.writeFieldEnd()
        if self.isRpcClient is not None:
            oprot.writeFieldBegin('isRpcClient', TType.BOOL, 5)
            oprot.writeBool(self.isRpcClient)
            oprot.writeFieldEnd()
        if self.isRecordStatistics is not None:
            oprot.writeFieldBegin('isRecordStatistics', TType.BOOL, 6)
            oprot.writeBool(self.isRecordStatistics)
            oprot.writeFieldEnd()
        if self.isUnknown is not None:
            oprot.writeFieldBegin('isUnknown', TType.BOOL, 7)
            oprot.writeBool(self.isUnknown)
            oprot.writeFieldEnd()
        if self.isUser is not None:
            oprot.writeFieldBegin('isUser', TType.BOOL, 8)
            oprot.writeBool(self.isUser)
            oprot.writeFieldEnd()
        if self.isTerminal is not None:
            oprot.writeFieldBegin('isTerminal', TType.BOOL, 9)
            oprot.writeBool(self.isTerminal)
            oprot.writeFieldEnd()
        if self.isQueue is not None:
            oprot.writeFieldBegin('isQueue', TType.BOOL, 10)
            oprot.writeBool(self.isQueue)
            oprot.writeFieldEnd()
        if self.isIncludeDestinationId is not None:
            oprot.writeFieldBegin('isIncludeDestinationId', TType.BOOL, 11)
            oprot.writeBool(self.isIncludeDestinationId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        if self.desc is None:
            raise TProtocolException(message='Required field desc is unset!')
        if self.isInternalMethod is None:
            raise TProtocolException(message='Required field isInternalMethod is unset!')
        if self.isRpcClient is None:
            raise TProtocolException(message='Required field isRpcClient is unset!')
        if self.isRecordStatistics is None:
            raise TProtocolException(message='Required field isRecordStatistics is unset!')
        if self.isUnknown is None:
            raise TProtocolException(message='Required field isUnknown is unset!')
        if self.isUser is None:
            raise TProtocolException(message='Required field isUser is unset!')
        if self.isTerminal is None:
            raise TProtocolException(message='Required field isTerminal is unset!')
        if self.isQueue is None:
            raise TProtocolException(message='Required field isQueue is unset!')
        if self.isIncludeDestinationId is None:
            raise TProtocolException(message='Required field isIncludeDestinationId is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TServiceTypeChunk(object):
    """
    Attributes:
     - app_key
     - agent_id
     - appId
     - tenant
     - serviceTypeList

    """


    def __init__(self, app_key=None, agent_id=None, appId=None, tenant=None, serviceTypeList=None,):
        self.app_key = app_key
        self.agent_id = agent_id
        self.appId = appId
        self.tenant = tenant
        self.serviceTypeList = serviceTypeList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.app_key = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.agent_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tenant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.serviceTypeList = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = TServiceType()
                        _elem110.read(iprot)
                        self.serviceTypeList.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TServiceTypeChunk')
        if self.app_key is not None:
            oprot.writeFieldBegin('app_key', TType.STRING, 1)
            oprot.writeString(self.app_key.encode('utf-8') if sys.version_info[0] == 2 else self.app_key)
            oprot.writeFieldEnd()
        if self.agent_id is not None:
            oprot.writeFieldBegin('agent_id', TType.STRING, 2)
            oprot.writeString(self.agent_id.encode('utf-8') if sys.version_info[0] == 2 else self.agent_id)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 3)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        if self.tenant is not None:
            oprot.writeFieldBegin('tenant', TType.STRING, 4)
            oprot.writeString(self.tenant.encode('utf-8') if sys.version_info[0] == 2 else self.tenant)
            oprot.writeFieldEnd()
        if self.serviceTypeList is not None:
            oprot.writeFieldBegin('serviceTypeList', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.serviceTypeList))
            for iter111 in self.serviceTypeList:
                iter111.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.app_key is None:
            raise TProtocolException(message='Required field app_key is unset!')
        if self.agent_id is None:
            raise TProtocolException(message='Required field agent_id is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.tenant is None:
            raise TProtocolException(message='Required field tenant is unset!')
        if self.serviceTypeList is None:
            raise TProtocolException(message='Required field serviceTypeList is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TStringMetaData(object):
    """
    Attributes:
     - agentId
     - agentStartTime
     - stringId
     - stringValue

    """


    def __init__(self, agentId=None, agentStartTime=None, stringId=None, stringValue=None,):
        self.agentId = agentId
        self.agentStartTime = agentStartTime
        self.stringId = stringId
        self.stringValue = stringValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.agentStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.stringId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TStringMetaData')
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 1)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.agentStartTime is not None:
            oprot.writeFieldBegin('agentStartTime', TType.I64, 2)
            oprot.writeI64(self.agentStartTime)
            oprot.writeFieldEnd()
        if self.stringId is not None:
            oprot.writeFieldBegin('stringId', TType.I32, 4)
            oprot.writeI32(self.stringId)
            oprot.writeFieldEnd()
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 5)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.agentId is None:
            raise TProtocolException(message='Required field agentId is unset!')
        if self.agentStartTime is None:
            raise TProtocolException(message='Required field agentStartTime is unset!')
        if self.stringId is None:
            raise TProtocolException(message='Required field stringId is unset!')
        if self.stringValue is None:
            raise TProtocolException(message='Required field stringValue is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSqlMetaData(object):
    """
    Attributes:
     - appkey
     - template
     - hash
     - appId
     - tenant

    """


    def __init__(self, appkey=None, template=None, hash=None, appId=None, tenant=None,):
        self.appkey = appkey
        self.template = template
        self.hash = hash
        self.appId = appId
        self.tenant = tenant

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.appkey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.template = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hash = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.tenant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSqlMetaData')
        if self.appkey is not None:
            oprot.writeFieldBegin('appkey', TType.STRING, 1)
            oprot.writeString(self.appkey.encode('utf-8') if sys.version_info[0] == 2 else self.appkey)
            oprot.writeFieldEnd()
        if self.template is not None:
            oprot.writeFieldBegin('template', TType.STRING, 2)
            oprot.writeString(self.template.encode('utf-8') if sys.version_info[0] == 2 else self.template)
            oprot.writeFieldEnd()
        if self.hash is not None:
            oprot.writeFieldBegin('hash', TType.STRING, 3)
            oprot.writeString(self.hash.encode('utf-8') if sys.version_info[0] == 2 else self.hash)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 4)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        if self.tenant is not None:
            oprot.writeFieldBegin('tenant', TType.STRING, 5)
            oprot.writeString(self.tenant.encode('utf-8') if sys.version_info[0] == 2 else self.tenant)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.appkey is None:
            raise TProtocolException(message='Required field appkey is unset!')
        if self.template is None:
            raise TProtocolException(message='Required field template is unset!')
        if self.hash is None:
            raise TProtocolException(message='Required field hash is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.tenant is None:
            raise TProtocolException(message='Required field tenant is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TSqlMetaData2Api(object):
    """
    Attributes:
     - host
     - dbhost
     - db
     - table
     - status
     - method
     - dur
     - agent_id
     - startTime
     - owner
     - url
     - clause
     - bindValue
     - transactionId
     - spanId
     - appKey
     - err
     - pspanId
     - pagentId
     - dbtype
     - agentStartTime
     - sqlId
     - outputs
     - appId
     - tenant

    """


    def __init__(self, host=None, dbhost=None, db=None, table=None, status=None, method=None, dur=None, agent_id=None, startTime=None, owner=None, url=None, clause=None, bindValue=None, transactionId=None, spanId=None, appKey=None, err=None, pspanId=None, pagentId=None, dbtype=None, agentStartTime=None, sqlId=None, outputs=None, appId=None, tenant=None,):
        self.host = host
        self.dbhost = dbhost
        self.db = db
        self.table = table
        self.status = status
        self.method = method
        self.dur = dur
        self.agent_id = agent_id
        self.startTime = startTime
        self.owner = owner
        self.url = url
        self.clause = clause
        self.bindValue = bindValue
        self.transactionId = transactionId
        self.spanId = spanId
        self.appKey = appKey
        self.err = err
        self.pspanId = pspanId
        self.pagentId = pagentId
        self.dbtype = dbtype
        self.agentStartTime = agentStartTime
        self.sqlId = sqlId
        self.outputs = outputs
        self.appId = appId
        self.tenant = tenant

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.dbhost = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.db = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.table = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.dur = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.agent_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.owner = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.clause = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.bindValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.transactionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.spanId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.appKey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.err = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.pspanId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.pagentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.dbtype = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I64:
                    self.agentStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.sqlId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.outputs = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.tenant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TSqlMetaData2Api')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.dbhost is not None:
            oprot.writeFieldBegin('dbhost', TType.STRING, 2)
            oprot.writeString(self.dbhost.encode('utf-8') if sys.version_info[0] == 2 else self.dbhost)
            oprot.writeFieldEnd()
        if self.db is not None:
            oprot.writeFieldBegin('db', TType.STRING, 3)
            oprot.writeString(self.db.encode('utf-8') if sys.version_info[0] == 2 else self.db)
            oprot.writeFieldEnd()
        if self.table is not None:
            oprot.writeFieldBegin('table', TType.STRING, 4)
            oprot.writeString(self.table.encode('utf-8') if sys.version_info[0] == 2 else self.table)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 5)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 6)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.dur is not None:
            oprot.writeFieldBegin('dur', TType.I64, 7)
            oprot.writeI64(self.dur)
            oprot.writeFieldEnd()
        if self.agent_id is not None:
            oprot.writeFieldBegin('agent_id', TType.STRING, 8)
            oprot.writeString(self.agent_id.encode('utf-8') if sys.version_info[0] == 2 else self.agent_id)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 9)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.owner is not None:
            oprot.writeFieldBegin('owner', TType.STRING, 10)
            oprot.writeString(self.owner.encode('utf-8') if sys.version_info[0] == 2 else self.owner)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 11)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.clause is not None:
            oprot.writeFieldBegin('clause', TType.STRING, 12)
            oprot.writeString(self.clause.encode('utf-8') if sys.version_info[0] == 2 else self.clause)
            oprot.writeFieldEnd()
        if self.bindValue is not None:
            oprot.writeFieldBegin('bindValue', TType.STRING, 13)
            oprot.writeString(self.bindValue.encode('utf-8') if sys.version_info[0] == 2 else self.bindValue)
            oprot.writeFieldEnd()
        if self.transactionId is not None:
            oprot.writeFieldBegin('transactionId', TType.STRING, 14)
            oprot.writeString(self.transactionId.encode('utf-8') if sys.version_info[0] == 2 else self.transactionId)
            oprot.writeFieldEnd()
        if self.spanId is not None:
            oprot.writeFieldBegin('spanId', TType.STRING, 15)
            oprot.writeString(self.spanId.encode('utf-8') if sys.version_info[0] == 2 else self.spanId)
            oprot.writeFieldEnd()
        if self.appKey is not None:
            oprot.writeFieldBegin('appKey', TType.STRING, 16)
            oprot.writeString(self.appKey.encode('utf-8') if sys.version_info[0] == 2 else self.appKey)
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRING, 17)
            oprot.writeString(self.err.encode('utf-8') if sys.version_info[0] == 2 else self.err)
            oprot.writeFieldEnd()
        if self.pspanId is not None:
            oprot.writeFieldBegin('pspanId', TType.STRING, 18)
            oprot.writeString(self.pspanId.encode('utf-8') if sys.version_info[0] == 2 else self.pspanId)
            oprot.writeFieldEnd()
        if self.pagentId is not None:
            oprot.writeFieldBegin('pagentId', TType.STRING, 19)
            oprot.writeString(self.pagentId.encode('utf-8') if sys.version_info[0] == 2 else self.pagentId)
            oprot.writeFieldEnd()
        if self.dbtype is not None:
            oprot.writeFieldBegin('dbtype', TType.STRING, 20)
            oprot.writeString(self.dbtype.encode('utf-8') if sys.version_info[0] == 2 else self.dbtype)
            oprot.writeFieldEnd()
        if self.agentStartTime is not None:
            oprot.writeFieldBegin('agentStartTime', TType.I64, 21)
            oprot.writeI64(self.agentStartTime)
            oprot.writeFieldEnd()
        if self.sqlId is not None:
            oprot.writeFieldBegin('sqlId', TType.I32, 22)
            oprot.writeI32(self.sqlId)
            oprot.writeFieldEnd()
        if self.outputs is not None:
            oprot.writeFieldBegin('outputs', TType.STRING, 23)
            oprot.writeString(self.outputs.encode('utf-8') if sys.version_info[0] == 2 else self.outputs)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 24)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        if self.tenant is not None:
            oprot.writeFieldBegin('tenant', TType.STRING, 25)
            oprot.writeString(self.tenant.encode('utf-8') if sys.version_info[0] == 2 else self.tenant)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.host is None:
            raise TProtocolException(message='Required field host is unset!')
        if self.dbhost is None:
            raise TProtocolException(message='Required field dbhost is unset!')
        if self.db is None:
            raise TProtocolException(message='Required field db is unset!')
        if self.table is None:
            raise TProtocolException(message='Required field table is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.method is None:
            raise TProtocolException(message='Required field method is unset!')
        if self.dur is None:
            raise TProtocolException(message='Required field dur is unset!')
        if self.agent_id is None:
            raise TProtocolException(message='Required field agent_id is unset!')
        if self.startTime is None:
            raise TProtocolException(message='Required field startTime is unset!')
        if self.owner is None:
            raise TProtocolException(message='Required field owner is unset!')
        if self.url is None:
            raise TProtocolException(message='Required field url is unset!')
        if self.clause is None:
            raise TProtocolException(message='Required field clause is unset!')
        if self.bindValue is None:
            raise TProtocolException(message='Required field bindValue is unset!')
        if self.transactionId is None:
            raise TProtocolException(message='Required field transactionId is unset!')
        if self.spanId is None:
            raise TProtocolException(message='Required field spanId is unset!')
        if self.appKey is None:
            raise TProtocolException(message='Required field appKey is unset!')
        if self.err is None:
            raise TProtocolException(message='Required field err is unset!')
        if self.pspanId is None:
            raise TProtocolException(message='Required field pspanId is unset!')
        if self.dbtype is None:
            raise TProtocolException(message='Required field dbtype is unset!')
        if self.agentStartTime is None:
            raise TProtocolException(message='Required field agentStartTime is unset!')
        if self.sqlId is None:
            raise TProtocolException(message='Required field sqlId is unset!')
        if self.outputs is None:
            raise TProtocolException(message='Required field outputs is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.tenant is None:
            raise TProtocolException(message='Required field tenant is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TApiMetaData(object):
    """
    Attributes:
     - agentId
     - agentStartTime
     - appkey
     - apiId
     - apiInfo
     - line
     - appId
     - tenant
     - type

    """


    def __init__(self, agentId=None, agentStartTime=None, appkey=None, apiId=None, apiInfo=None, line=None, appId=None, tenant=None, type=None,):
        self.agentId = agentId
        self.agentStartTime = agentStartTime
        self.appkey = appkey
        self.apiId = apiId
        self.apiInfo = apiInfo
        self.line = line
        self.appId = appId
        self.tenant = tenant
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.agentId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.agentStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.appkey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.apiId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.apiInfo = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.line = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.tenant = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TApiMetaData')
        if self.agentId is not None:
            oprot.writeFieldBegin('agentId', TType.STRING, 1)
            oprot.writeString(self.agentId.encode('utf-8') if sys.version_info[0] == 2 else self.agentId)
            oprot.writeFieldEnd()
        if self.agentStartTime is not None:
            oprot.writeFieldBegin('agentStartTime', TType.I64, 2)
            oprot.writeI64(self.agentStartTime)
            oprot.writeFieldEnd()
        if self.appkey is not None:
            oprot.writeFieldBegin('appkey', TType.STRING, 3)
            oprot.writeString(self.appkey.encode('utf-8') if sys.version_info[0] == 2 else self.appkey)
            oprot.writeFieldEnd()
        if self.apiId is not None:
            oprot.writeFieldBegin('apiId', TType.I32, 4)
            oprot.writeI32(self.apiId)
            oprot.writeFieldEnd()
        if self.apiInfo is not None:
            oprot.writeFieldBegin('apiInfo', TType.STRING, 5)
            oprot.writeString(self.apiInfo.encode('utf-8') if sys.version_info[0] == 2 else self.apiInfo)
            oprot.writeFieldEnd()
        if self.line is not None:
            oprot.writeFieldBegin('line', TType.I32, 6)
            oprot.writeI32(self.line)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 7)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        if self.tenant is not None:
            oprot.writeFieldBegin('tenant', TType.STRING, 8)
            oprot.writeString(self.tenant.encode('utf-8') if sys.version_info[0] == 2 else self.tenant)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 10)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.agentId is None:
            raise TProtocolException(message='Required field agentId is unset!')
        if self.agentStartTime is None:
            raise TProtocolException(message='Required field agentStartTime is unset!')
        if self.apiId is None:
            raise TProtocolException(message='Required field apiId is unset!')
        if self.apiInfo is None:
            raise TProtocolException(message='Required field apiInfo is unset!')
        if self.appId is None:
            raise TProtocolException(message='Required field appId is unset!')
        if self.tenant is None:
            raise TProtocolException(message='Required field tenant is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TResult(object):
    """
    Attributes:
     - success
     - message

    """


    def __init__(self, success=None, message=None,):
        self.success = success
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TResult')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 1)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.success is None:
            raise TProtocolException(message='Required field success is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TServiceInfo)
TServiceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serviceName', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'serviceLibs', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(TServerMetaData)
TServerMetaData.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'serverInfo', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'vmArgs', (TType.STRING, 'UTF8', False), None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.LIST, 'serviceInfos', (TType.STRUCT, [TServiceInfo, None], False), None, ),  # 10
)
all_structs.append(TJvmInfo)
TJvmInfo.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'version', None, 0, ),  # 1
    (2, TType.STRING, 'vmVersion', 'UTF8', None, ),  # 2
    (3, TType.I32, 'gcType', None,     0, ),  # 3
)
all_structs.append(TAgentInfo)
TAgentInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hostname', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ports', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'agentId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'applicationName', 'UTF8', None, ),  # 5
    (6, TType.I16, 'serviceType', None, None, ),  # 6
    (7, TType.I32, 'pid', None, None, ),  # 7
    (8, TType.STRING, 'agentVersion', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'vmVersion', 'UTF8', None, ),  # 9
    (10, TType.I64, 'startTimestamp', None, None, ),  # 10
    (11, TType.I64, 'endTimestamp', None, None, ),  # 11
    (12, TType.I32, 'endStatus', None, None, ),  # 12
    (13, TType.STRING, 'appkey', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'osName', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'osVersion', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'appId', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'tenant', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'collectionStatus', 'UTF8', None, ),  # 18
    None,  # 19
    (20, TType.STRUCT, 'serverMetaData', [TServerMetaData, None], None, ),  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.STRUCT, 'jvmInfo', [TJvmInfo, None], None, ),  # 30
)
all_structs.append(TJvmGc)
TJvmGc.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None,     0, ),  # 1
    (2, TType.I64, 'jvmMemoryHeapUsed', None, None, ),  # 2
    (3, TType.I64, 'jvmMemoryHeapMax', None, None, ),  # 3
    (4, TType.I64, 'jvmMemoryNonHeapUsed', None, None, ),  # 4
    (5, TType.I64, 'jvmMemoryNonHeapMax', None, None, ),  # 5
    (6, TType.I64, 'jvmGcOldCount', None, None, ),  # 6
    (7, TType.I64, 'jvmGcOldTime', None, None, ),  # 7
    (8, TType.STRUCT, 'jvmGcDetailed', [TJvmGcDetailed, None], None, ),  # 8
    (9, TType.I64, 'jvmMemoryNonHeapCommitted', None, None, ),  # 9
    (10, TType.I64, 'totalPhysicalMemory', None, None, ),  # 10
    (11, TType.LIST, 'tExecuteDfs', (TType.STRUCT, [TExecuteDf, None], False), None, ),  # 11
    (12, TType.STRUCT, 'tExecuteIostat', [TExecuteIostat, None], None, ),  # 12
    (13, TType.I16, 'jdbcConnNum', None, None, ),  # 13
    (14, TType.I32, 'threadNum', None, None, ),  # 14
    (15, TType.I64, 'jvmGcOldCountNew', None, None, ),  # 15
    (16, TType.I64, 'jvmGcOldTimeNew', None, None, ),  # 16
)
all_structs.append(TExecuteDf)
TExecuteDf.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileSystem', 'UTF8', None, ),  # 1
    (2, TType.I64, 'size', None, None, ),  # 2
    (3, TType.I64, 'used', None, None, ),  # 3
    (4, TType.I64, 'avail', None, None, ),  # 4
    (5, TType.I16, 'usage', None, None, ),  # 5
    (6, TType.STRING, 'mountedOn', 'UTF8', None, ),  # 6
)
all_structs.append(TExecuteIostat)
TExecuteIostat.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'tExecuteIostatCpu', [TExecuteIostatCpu, None], None, ),  # 1
    (2, TType.LIST, 'tExecuteIostatDevices', (TType.STRUCT, [TExecuteIostatDevice, None], False), None, ),  # 2
)
all_structs.append(TExecuteIostatCpu)
TExecuteIostatCpu.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userUsage', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'niceUsage', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'systemUsage', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'iowaitUsage', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'stealUsage', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'idleUsage', 'UTF8', None, ),  # 6
)
all_structs.append(TExecuteIostatDevice)
TExecuteIostatDevice.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'device', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tps', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'kB_read_pers', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'kB_wrtn_pers', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'kB_read', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'kB_wrtn', 'UTF8', None, ),  # 6
)
all_structs.append(TJvmGcDetailed)
TJvmGcDetailed.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'jvmGcNewCount', None, None, ),  # 1
    (2, TType.I64, 'jvmGcNewTime', None, None, ),  # 2
    (3, TType.DOUBLE, 'jvmPoolCodeCacheUsage', None, None, ),  # 3
    (4, TType.I64, 'jvmPoolCodeCacheMax', None, None, ),  # 4
    (5, TType.I64, 'jvmPoolCodeCacheUsed', None, None, ),  # 5
    (6, TType.I64, 'jvmPoolCodeCacheCommitted', None, None, ),  # 6
    (7, TType.I64, 'jvmPoolCodeCacheInit', None, None, ),  # 7
    (8, TType.DOUBLE, 'jvmPoolNewGenUsage', None, None, ),  # 8
    (9, TType.I64, 'jvmPoolNewGenMax', None, None, ),  # 9
    (10, TType.I64, 'jvmPoolNewGenUsed', None, None, ),  # 10
    (11, TType.I64, 'jvmPoolNewGenCommitted', None, None, ),  # 11
    (12, TType.I64, 'jvmPoolNewGenInit', None, None, ),  # 12
    (13, TType.DOUBLE, 'jvmPoolOldGenUsage', None, None, ),  # 13
    (14, TType.I64, 'jvmPoolOldGenMax', None, None, ),  # 14
    (15, TType.I64, 'jvmPoolOldGenUsed', None, None, ),  # 15
    (16, TType.I64, 'jvmPoolOldGenCommitted', None, None, ),  # 16
    (17, TType.I64, 'jvmPoolOldGenInit', None, None, ),  # 17
    (18, TType.DOUBLE, 'jvmPoolSurvivorSpaceUsage', None, None, ),  # 18
    (19, TType.I64, 'jvmPoolSurvivorSpaceMax', None, None, ),  # 19
    (20, TType.I64, 'jvmPoolSurvivorSpaceUsed', None, None, ),  # 20
    (21, TType.I64, 'jvmPoolSurvivorSpaceCommitted', None, None, ),  # 21
    (22, TType.I64, 'jvmPoolSurvivorSpaceInit', None, None, ),  # 22
    (23, TType.DOUBLE, 'jvmPoolPermGenUsage', None, None, ),  # 23
    (24, TType.I64, 'jvmPoolPermGenMax', None, None, ),  # 24
    (25, TType.I64, 'jvmPoolPermGenUsed', None, None, ),  # 25
    (26, TType.I64, 'jvmPoolPermGenCommitted', None, None, ),  # 26
    (27, TType.I64, 'jvmPoolPermGenInit', None, None, ),  # 27
    (28, TType.DOUBLE, 'jvmPoolMetaspaceUsage', None, None, ),  # 28
    (29, TType.I64, 'jvmPoolMetaspaceMax', None, None, ),  # 29
    (30, TType.I64, 'jvmPoolMetaspaceUsed', None, None, ),  # 30
    (31, TType.I64, 'jvmPoolMetaspaceCommitted', None, None, ),  # 31
    (32, TType.I64, 'jvmPoolMetaspaceInit', None, None, ),  # 32
)
all_structs.append(TCpuLoad)
TCpuLoad.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'jvmCpuLoad', None, None, ),  # 1
    (2, TType.I64, 'systemCpuLoad', None, None, ),  # 2
)
all_structs.append(TTransaction)
TTransaction.thrift_spec = (
    None,  # 0
    None,  # 1
    (2, TType.I64, 'sampledNewCount', None, None, ),  # 2
    (3, TType.I64, 'sampledContinuationCount', None, None, ),  # 3
    (4, TType.I64, 'unsampledNewCount', None, None, ),  # 4
    (5, TType.I64, 'unsampledContinuationCount', None, None, ),  # 5
)
all_structs.append(TActiveTraceHistogram)
TActiveTraceHistogram.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'version', None, 0, ),  # 1
    (2, TType.I32, 'histogramSchemaType', None, None, ),  # 2
    (3, TType.LIST, 'activeTraceCount', (TType.I32, None, False), None, ),  # 3
)
all_structs.append(TActiveTrace)
TActiveTrace.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'histogram', [TActiveTraceHistogram, None], None, ),  # 1
)
all_structs.append(TAgentStat)
TAgentStat.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'agentId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'startTimestamp', None, None, ),  # 2
    (3, TType.I64, 'timestamp', None, None, ),  # 3
    (4, TType.I64, 'collectInterval', None, None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRUCT, 'gc', [TJvmGc, None], None, ),  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRUCT, 'cpuLoad', [TCpuLoad, None], None, ),  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.STRUCT, 'transaction', [TTransaction, None], None, ),  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    (40, TType.STRUCT, 'activeTrace', [TActiveTrace, None], None, ),  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    None,  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    None,  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    None,  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    None,  # 150
    None,  # 151
    None,  # 152
    None,  # 153
    None,  # 154
    None,  # 155
    None,  # 156
    None,  # 157
    None,  # 158
    None,  # 159
    None,  # 160
    None,  # 161
    None,  # 162
    None,  # 163
    None,  # 164
    None,  # 165
    None,  # 166
    None,  # 167
    None,  # 168
    None,  # 169
    None,  # 170
    None,  # 171
    None,  # 172
    None,  # 173
    None,  # 174
    None,  # 175
    None,  # 176
    None,  # 177
    None,  # 178
    None,  # 179
    None,  # 180
    None,  # 181
    None,  # 182
    None,  # 183
    None,  # 184
    None,  # 185
    None,  # 186
    None,  # 187
    None,  # 188
    None,  # 189
    None,  # 190
    None,  # 191
    None,  # 192
    None,  # 193
    None,  # 194
    None,  # 195
    None,  # 196
    None,  # 197
    None,  # 198
    None,  # 199
    (200, TType.STRING, 'metadata', 'UTF8', None, ),  # 200
    None,  # 201
    None,  # 202
    None,  # 203
    None,  # 204
    None,  # 205
    None,  # 206
    None,  # 207
    None,  # 208
    None,  # 209
    (210, TType.I32, 'threadCount', None, None, ),  # 210
)
all_structs.append(TAgentStatBatch)
TAgentStatBatch.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'agentId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'startTimestamp', None, None, ),  # 2
    (3, TType.STRING, 'appKey', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'appId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'tenant', 'UTF8', None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.LIST, 'agentStats', (TType.STRUCT, [TAgentStat, None], False), None, ),  # 10
    (11, TType.I16, 'serviceType', None, None, ),  # 11
)
all_structs.append(TAgentLifeCycle)
TAgentLifeCycle.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'appkey', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'appId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tenant', 'UTF8', None, ),  # 3
    None,  # 4
    (5, TType.STRING, 'agentId', 'UTF8', None, ),  # 5
    (6, TType.I64, 'startTimestamp', None, None, ),  # 6
    (7, TType.I64, 'eventTimestamp', None, None, ),  # 7
    (8, TType.STRING, 'status', 'UTF8', None, ),  # 8
    (9, TType.I32, 'duration', None, None, ),  # 9
    (10, TType.I16, 'serviceType', None, None, ),  # 10
)
all_structs.append(TAgentEventType)
TAgentEventType.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'desc', 'UTF8', None, ),  # 2
)
all_structs.append(TAgentEvent)
TAgentEvent.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'appkey', 'UTF8', None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    (5, TType.STRING, 'agentId', 'UTF8', None, ),  # 5
    (6, TType.I64, 'eventTimestamp', None, None, ),  # 6
    (7, TType.STRUCT, 'eventType', [TAgentEventType, None], None, ),  # 7
    (8, TType.STRING, 'eventMessage', 'UTF8', None, ),  # 8
)
all_structs.append(LockedMonitorInfo)
LockedMonitorInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'stackDepth', None, None, ),  # 1
    (2, TType.STRING, 'stackTraceElement', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'className', 'UTF8', None, ),  # 3
    (4, TType.I32, 'identityHashCode', None, None, ),  # 4
)
all_structs.append(ThreadDetailStackTraceElement)
ThreadDetailStackTraceElement.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'className', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'methodName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'fileName', 'UTF8', None, ),  # 3
    (4, TType.I32, 'lineNumber', None, None, ),  # 4
)
all_structs.append(TAgentThreadDetail)
TAgentThreadDetail.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'group', 'UTF8', None, ),  # 2
    (3, TType.I64, 'cpuTime', None, None, ),  # 3
    (4, TType.STRING, 'state', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'ownedMonitors', (TType.STRUCT, [LockedMonitorInfo, None], False), None, ),  # 5
    (6, TType.STRING, 'waitOn', 'UTF8', None, ),  # 6
    (7, TType.I32, 'priority', None, None, ),  # 7
    (8, TType.I64, 'threadId', None, None, ),  # 8
    (9, TType.LIST, 'stackTraceElements', (TType.STRUCT, [ThreadDetailStackTraceElement, None], False), None, ),  # 9
)
all_structs.append(TAgentThread)
TAgentThread.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'appkey', 'UTF8', None, ),  # 1
    (2, TType.I64, 'id', None, None, ),  # 2
    None,  # 3
    (4, TType.STRING, 'applicationName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'agentId', 'UTF8', None, ),  # 5
    (6, TType.I64, 'ts', None, None, ),  # 6
    (7, TType.BOOL, 'isDeadLock', None, None, ),  # 7
    (8, TType.STRING, 'deadLockMessage', 'UTF8', None, ),  # 8
    (9, TType.LIST, 'threadDetail', (TType.STRUCT, [TAgentThreadDetail, None], False), None, ),  # 9
    (10, TType.I64, 'analysisid', None, None, ),  # 10
    (11, TType.STRING, 'appId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'tenant', 'UTF8', None, ),  # 12
)
all_structs.append(TAgentThreadChunk)
TAgentThreadChunk.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'appkey', 'UTF8', None, ),  # 1
    (2, TType.I64, 'id', None, None, ),  # 2
    None,  # 3
    (4, TType.STRING, 'applicationName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'agentId', 'UTF8', None, ),  # 5
    (6, TType.I64, 'ts', None, None, ),  # 6
    None,  # 7
    None,  # 8
    (9, TType.LIST, 'threadDetail', (TType.STRUCT, [TAgentThreadDetail, None], False), None, ),  # 9
    (10, TType.I64, 'analysisid', None, None, ),  # 10
    (11, TType.STRING, 'appId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'tenant', 'UTF8', None, ),  # 12
)
all_structs.append(TDbMetaData)
TDbMetaData.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'agentId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'appKey', 'UTF8', None, ),  # 2
    None,  # 3
    (4, TType.STRING, 'dbUrl', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'dbHost', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'dbName', 'UTF8', None, ),  # 6
    None,  # 7
    (8, TType.I16, 'dbTypeCode', None, None, ),  # 8
)
all_structs.append(TIntStringValue)
TIntStringValue.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'intValue', None, None, ),  # 1
    (2, TType.STRING, 'stringValue', 'UTF8', None, ),  # 2
)
all_structs.append(TIntStringStringValue)
TIntStringStringValue.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'intValue', None, None, ),  # 1
    (2, TType.STRING, 'stringValue1', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'stringValue2', 'UTF8', None, ),  # 3
)
all_structs.append(TAnnotationValue)
TAnnotationValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'stringValue', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'boolValue', None, None, ),  # 2
    (3, TType.I32, 'intValue', None, None, ),  # 3
    (4, TType.I64, 'longValue', None, None, ),  # 4
    (5, TType.I16, 'shortValue', None, None, ),  # 5
    (6, TType.DOUBLE, 'doubleValue', None, None, ),  # 6
    (7, TType.STRING, 'binaryValue', 'BINARY', None, ),  # 7
    (8, TType.BYTE, 'byteValue', None, None, ),  # 8
    (9, TType.STRUCT, 'intStringValue', [TIntStringValue, None], None, ),  # 9
    (10, TType.STRUCT, 'intStringStringValue', [TIntStringStringValue, None], None, ),  # 10
)
all_structs.append(TAnnotation)
TAnnotation.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'key', None, None, ),  # 1
    (2, TType.STRUCT, 'value', [TAnnotationValue, None], None, ),  # 2
)
all_structs.append(TSql)
TSql.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'dbhost', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dbtype', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'db', 'UTF8', None, ),  # 3
    None,  # 4
    None,  # 5
    (6, TType.STRING, 'sqlHash', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'outputs', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'bindValue', 'UTF8', None, ),  # 8
    None,  # 9
    (10, TType.STRING, 'status', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'err', 'UTF8', None, ),  # 11
    (12, TType.I64, 'startTime', None, None, ),  # 12
    (13, TType.I64, 'dur', None, None, ),  # 13
)
all_structs.append(TSpanEvent)
TSpanEvent.thrift_spec = (
    None,  # 0
    None,  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    (7, TType.I64, 'spanId', None, None, ),  # 7
    (8, TType.I32, 'sequence', None, None, ),  # 8
    (9, TType.I32, 'startElapsed', None, None, ),  # 9
    (10, TType.I32, 'endElapsed', None, 0, ),  # 10
    (11, TType.STRING, 'rpc', 'UTF8', None, ),  # 11
    (12, TType.I16, 'serviceType', None, None, ),  # 12
    (13, TType.STRING, 'endPoint', 'UTF8', None, ),  # 13
    (14, TType.LIST, 'annotations', (TType.STRUCT, [TAnnotation, None], False), None, ),  # 14
    (15, TType.I32, 'depth', None, -1, ),  # 15
    (16, TType.I64, 'nextSpanId', None, -1, ),  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRING, 'destinationId', 'UTF8', None, ),  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    (25, TType.I32, 'apiId', None, None, ),  # 25
    (26, TType.STRUCT, 'exceptionInfo', [TIntStringValue, None], None, ),  # 26
    (27, TType.STRING, 'exceptionClassName', 'UTF8', None, ),  # 27
    None,  # 28
    None,  # 29
    (30, TType.I32, 'asyncId', None, None, ),  # 30
    (31, TType.I32, 'nextAsyncId', None, None, ),  # 31
    (32, TType.I32, 'asyncSequence', None, None, ),  # 32
    (33, TType.STRING, 'apiInfo', 'UTF8', None, ),  # 33
    (34, TType.I32, 'lineNumber', None, None, ),  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    (40, TType.STRUCT, 'sql', [TSql, None], None, ),  # 40
    (41, TType.I32, 'retcode', None, None, ),  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    (51, TType.STRING, 'requestHeaders', 'UTF8', None, ),  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    (61, TType.STRING, 'requestBody', 'UTF8', None, ),  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    (71, TType.STRING, 'responseBody', 'UTF8', None, ),  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    (81, TType.STRING, 'url', 'UTF8', None, ),  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    (91, TType.STRING, 'method', 'UTF8', None, ),  # 91
    (92, TType.STRING, 'arguments', 'UTF8', None, ),  # 92
)
all_structs.append(TExceptionMetaData2Api)
TExceptionMetaData2Api.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ts', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'msg', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'method', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'exceptionClass', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'apiName', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'url', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'tier', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'agent_id', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'app_key', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'tenant', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'appId', 'UTF8', None, ),  # 12
    None,  # 13
    (14, TType.STRING, 'transactionId', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'spanId', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'pspanId', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'pagentId', 'UTF8', None, ),  # 17
    (18, TType.I32, 'exceptionId', None, None, ),  # 18
    (19, TType.STRING, 'userId', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'sessionId', 'UTF8', None, ),  # 20
    (21, TType.I64, 'agentStartTime', None, None, ),  # 21
    (22, TType.STRING, 'ip', 'UTF8', None, ),  # 22
)
all_structs.append(TSpan)
TSpan.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'agentId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'applicationName', 'UTF8', None, ),  # 2
    (3, TType.I64, 'agentStartTime', None, None, ),  # 3
    (4, TType.STRING, 'transactionId', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'appkey', 'UTF8', None, ),  # 5
    None,  # 6
    (7, TType.I64, 'spanId', None, None, ),  # 7
    (8, TType.I64, 'parentSpanId', None, -1, ),  # 8
    (9, TType.I64, 'startTime', None, None, ),  # 9
    (10, TType.I32, 'elapsed', None, 0, ),  # 10
    (11, TType.STRING, 'rpc', 'UTF8', None, ),  # 11
    (12, TType.I16, 'serviceType', None, None, ),  # 12
    (13, TType.STRING, 'endPoint', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'remoteAddr', 'UTF8', None, ),  # 14
    (15, TType.LIST, 'annotations', (TType.STRUCT, [TAnnotation, None], False), None, ),  # 15
    (16, TType.I16, 'flag', None, 0, ),  # 16
    (17, TType.I32, 'err', None, None, ),  # 17
    (18, TType.LIST, 'spanEventList', (TType.STRUCT, [TSpanEvent, None], False), None, ),  # 18
    (19, TType.STRING, 'parentApplicationName', 'UTF8', None, ),  # 19
    (20, TType.I16, 'parentApplicationType', None, None, ),  # 20
    (21, TType.STRING, 'acceptorHost', 'UTF8', None, ),  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    (25, TType.I32, 'apiId', None, None, ),  # 25
    (26, TType.STRUCT, 'exceptionInfo', [TIntStringValue, None], None, ),  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    (30, TType.I16, 'applicationServiceType', None, None, ),  # 30
    (31, TType.BYTE, 'loggingTransactionInfo', None, None, ),  # 31
    (32, TType.STRING, 'httpPara', 'UTF8', None, ),  # 32
    (33, TType.STRING, 'httpMethod', 'UTF8', None, ),  # 33
    (34, TType.STRING, 'httpRequestHeader', 'UTF8', None, ),  # 34
    (35, TType.STRING, 'httpRequestUserAgent', 'UTF8', None, ),  # 35
    (36, TType.STRING, 'httpRequestBody', 'UTF8', None, ),  # 36
    (37, TType.STRING, 'httpResponseBody', 'UTF8', None, ),  # 37
    (38, TType.I16, 'retcode', None, None, ),  # 38
    (39, TType.STRING, 'httpRequestUID', 'UTF8', None, ),  # 39
    (40, TType.STRING, 'httpRequestTID', 'UTF8', None, ),  # 40
    (41, TType.STRING, 'pagentId', 'UTF8', None, ),  # 41
    (42, TType.STRING, 'apidesc', 'UTF8', None, ),  # 42
    (43, TType.STRING, 'httpResponseHeader', 'UTF8', None, ),  # 43
    (44, TType.STRING, 'userId', 'UTF8', None, ),  # 44
    (45, TType.STRING, 'sessionId', 'UTF8', None, ),  # 45
    (46, TType.STRING, 'appId', 'UTF8', None, ),  # 46
    (47, TType.STRING, 'tenant', 'UTF8', None, ),  # 47
    None,  # 48
    None,  # 49
    (50, TType.I64, 'threadId', None, None, ),  # 50
    (51, TType.STRING, 'threadName', 'UTF8', None, ),  # 51
    (52, TType.BOOL, 'hasNextCall', None, None, ),  # 52
)
all_structs.append(TSpanChunk)
TSpanChunk.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'agentId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'applicationName', 'UTF8', None, ),  # 2
    (3, TType.I64, 'agentStartTime', None, None, ),  # 3
    (4, TType.I16, 'serviceType', None, None, ),  # 4
    (5, TType.STRING, 'transactionId', 'BINARY', None, ),  # 5
    (6, TType.STRING, 'appkey', 'UTF8', None, ),  # 6
    None,  # 7
    (8, TType.I64, 'spanId', None, None, ),  # 8
    (9, TType.STRING, 'endPoint', 'UTF8', None, ),  # 9
    (10, TType.LIST, 'spanEventList', (TType.STRUCT, [TSpanEvent, None], False), None, ),  # 10
    (11, TType.I16, 'applicationServiceType', None, None, ),  # 11
    (12, TType.STRING, 'appId', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'tenant', 'UTF8', None, ),  # 13
    None,  # 14
    (15, TType.I64, 'threadId', None, None, ),  # 15
    (16, TType.STRING, 'threadName', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'userId', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'sessionId', 'UTF8', None, ),  # 18
    (19, TType.I64, 'startTime', None, None, ),  # 19
)
all_structs.append(TServiceType)
TServiceType.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I16, 'code', None, None, ),  # 2
    (3, TType.STRING, 'desc', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'isInternalMethod', None, None, ),  # 4
    (5, TType.BOOL, 'isRpcClient', None, None, ),  # 5
    (6, TType.BOOL, 'isRecordStatistics', None, None, ),  # 6
    (7, TType.BOOL, 'isUnknown', None, None, ),  # 7
    (8, TType.BOOL, 'isUser', None, None, ),  # 8
    (9, TType.BOOL, 'isTerminal', None, None, ),  # 9
    (10, TType.BOOL, 'isQueue', None, None, ),  # 10
    (11, TType.BOOL, 'isIncludeDestinationId', None, None, ),  # 11
)
all_structs.append(TServiceTypeChunk)
TServiceTypeChunk.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'app_key', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'agent_id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'appId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'tenant', 'UTF8', None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.LIST, 'serviceTypeList', (TType.STRUCT, [TServiceType, None], False), None, ),  # 10
)
all_structs.append(TStringMetaData)
TStringMetaData.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'agentId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'agentStartTime', None, None, ),  # 2
    None,  # 3
    (4, TType.I32, 'stringId', None, None, ),  # 4
    (5, TType.STRING, 'stringValue', 'UTF8', None, ),  # 5
)
all_structs.append(TSqlMetaData)
TSqlMetaData.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'appkey', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'template', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'hash', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'appId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'tenant', 'UTF8', None, ),  # 5
)
all_structs.append(TSqlMetaData2Api)
TSqlMetaData2Api.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'host', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'dbhost', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'db', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'table', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'status', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'method', 'UTF8', None, ),  # 6
    (7, TType.I64, 'dur', None, None, ),  # 7
    (8, TType.STRING, 'agent_id', 'UTF8', None, ),  # 8
    (9, TType.I64, 'startTime', None, None, ),  # 9
    (10, TType.STRING, 'owner', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'url', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'clause', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'bindValue', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'transactionId', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'spanId', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'appKey', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'err', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'pspanId', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'pagentId', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'dbtype', 'UTF8', None, ),  # 20
    (21, TType.I64, 'agentStartTime', None, None, ),  # 21
    (22, TType.I32, 'sqlId', None, None, ),  # 22
    (23, TType.STRING, 'outputs', 'UTF8', None, ),  # 23
    (24, TType.STRING, 'appId', 'UTF8', None, ),  # 24
    (25, TType.STRING, 'tenant', 'UTF8', None, ),  # 25
)
all_structs.append(TApiMetaData)
TApiMetaData.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'agentId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'agentStartTime', None, None, ),  # 2
    (3, TType.STRING, 'appkey', 'UTF8', None, ),  # 3
    (4, TType.I32, 'apiId', None, None, ),  # 4
    (5, TType.STRING, 'apiInfo', 'UTF8', None, ),  # 5
    (6, TType.I32, 'line', None, None, ),  # 6
    (7, TType.STRING, 'appId', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'tenant', 'UTF8', None, ),  # 8
    None,  # 9
    (10, TType.I32, 'type', None, None, ),  # 10
)
all_structs.append(TResult)
TResult.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'success', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
